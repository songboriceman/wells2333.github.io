<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EHedgehog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ehedgehog.com/"/>
  <updated>2020-07-04T02:36:13.729Z</updated>
  <id>http://ehedgehog.com/</id>
  
  <author>
    <name>tangyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win10搭建k8s，istio环境</title>
    <link href="http://ehedgehog.com/2020/07/04/win10%E6%90%AD%E5%BB%BAk8s%EF%BC%8Cistio%E7%8E%AF%E5%A2%83/"/>
    <id>http://ehedgehog.com/2020/07/04/win10%E6%90%AD%E5%BB%BAk8s%EF%BC%8Cistio%E7%8E%AF%E5%A2%83/</id>
    <published>2020-07-04T02:22:20.000Z</published>
    <updated>2020-07-04T02:36:13.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><ul><li>系统：win10</li><li>内存：16G</li><li>docker desktop：2.3.0.3</li><li>kubernetes：v1.16.5</li><li>istio：1.6.4</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装k8s"><a href="#安装k8s" class="headerlink" title="安装k8s"></a>安装k8s</h3><p>视频教程：<a href="https://www.bilibili.com/video/av96585506" target="_blank" rel="noopener">https://www.bilibili.com/video/av96585506</a></p><p>下载安装包：<a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/AliyunContainerService/k8s-for-docker-desktop</span><br></pre></td></tr></table></figure><p>获取登录token：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$TOKEN=((kubectl -n kube-system describe secret default | Select-String &quot;token:&quot;) -split &quot; +&quot;)[1]</span><br><span class="line">kubectl config set-credentials docker-for-desktop --token=&quot;$&#123;TOKEN&#125;&quot;</span><br><span class="line">echo $TOKEN</span><br><span class="line">kubectl proxy</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/" target="_blank" rel="noopener">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</a></p><h3 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h3><p>安装istio：</p><p>下载istio-1.6.4-win.zip，添加环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl install --set profile=demo</span><br></pre></td></tr></table></figure><p>启用kiali：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl dashboard kiali</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:2978/kiali" target="_blank" rel="noopener">http://localhost:2978/kiali</a></p><p>其它监控可以通过dashboard命令查看：<code>istioctl dashboard</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl dashboard </span><br></pre></td></tr></table></figure><p>域名访问：<code>${serviceName}.${namespace}.svc.cluster.local</code></p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>打包和构建镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\gradlew build&amp;&amp;docker-compose build</span><br></pre></td></tr></table></figure><h2 id="部署demo"><a href="#部署demo" class="headerlink" title="部署demo"></a>部署demo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace sg-exam</span><br><span class="line"></span><br><span class="line">kubectl config set-context $(kubectl config current-context) --namespace=sg-exam</span><br><span class="line"></span><br><span class="line">kubectl create configmap config-repo-auth-service      --from-file=config-repo/application.yml --from-file=config-repo/auth-service.yml --save-config</span><br><span class="line">kubectl create configmap config-repo-exam-service      --from-file=config-repo/application.yml --from-file=config-repo/exam-service.yml --save-config</span><br><span class="line">kubectl create configmap config-repo-msc-service      --from-file=config-repo/application.yml --from-file=config-repo/msc-service.yml --save-config</span><br><span class="line">kubectl create configmap config-repo-user-service      --from-file=config-repo/application.yml --from-file=config-repo/user-service.yml --save-config</span><br><span class="line"></span><br><span class="line">kubectl create secret generic config-server-secrets --from-literal=ENCRYPT_KEY=my-very-secure-encrypt-key --from-literal=SPRING_SECURITY_USER_NAME=dev-usr --from-literal=SPRING_SECURITY_USER_PASSWORD=dev-pwd --save-config</span><br><span class="line"></span><br><span class="line">kubectl label namespace sg-exam istio-injection=enabled</span><br><span class="line"></span><br><span class="line">kubectl -n istio-system get secret istio-ingressgateway-certs</span><br><span class="line"></span><br><span class="line">kubectl create -n istio-system secret tls istio-ingressgateway-certs --key kubernetes/cert/tls.key --cert kubernetes/cert/tls.crt</span><br><span class="line"></span><br><span class="line">kubectl create secret tls tls-certificate --key kubernetes/cert/tls.key --cert kubernetes/cert/tls.crt</span><br><span class="line"></span><br><span class="line">kubectl apply -k kubernetes/services/overlays/dev</span><br><span class="line"></span><br><span class="line">kubectl apply -k kubernetes/services/base/dev</span><br><span class="line"></span><br><span class="line">kubectl get svc istio-ingressgateway -n istio-system</span><br></pre></td></tr></table></figure><h2 id="取消部署"><a href="#取消部署" class="headerlink" title="取消部署"></a>取消部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete namespace sg-exam</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置说明&quot;&gt;&lt;a href=&quot;#配置说明&quot; class=&quot;headerlink&quot; title=&quot;配置说明&quot;&gt;&lt;/a&gt;配置说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统：win10&lt;/li&gt;
&lt;li&gt;内存：16G&lt;/li&gt;
&lt;li&gt;docker desktop：2.3.0.3
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://ehedgehog.com/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://ehedgehog.com/tags/k8s/"/>
    
      <category term="istio" scheme="http://ehedgehog.com/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>macbook安装minikube</title>
    <link href="http://ehedgehog.com/2020/03/07/macbook%E5%AE%89%E8%A3%85minikube/"/>
    <id>http://ehedgehog.com/2020/03/07/macbook%E5%AE%89%E8%A3%85minikube/</id>
    <published>2020-03-06T16:15:46.000Z</published>
    <updated>2020-03-06T17:20:54.278Z</updated>
    
    <content type="html"><![CDATA[<p>k8s官方文档：<a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p><p>安装教程：<a href="https://www.youtube.com/watch?v=fXE1Gu71XNM" target="_blank" rel="noopener">https://www.youtube.com/watch?v=fXE1Gu71XNM</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install docker</span><br><span class="line"></span><br><span class="line">$ brew cask install minikube</span><br><span class="line"></span><br><span class="line">$ minikube start</span><br><span class="line"></span><br><span class="line">$ kubectl get pods</span><br><span class="line"></span><br><span class="line">$ kubectl get all</span><br><span class="line"></span><br><span class="line">$ ls -lrt</span><br><span class="line"></span><br><span class="line">minikube status</span><br><span class="line"></span><br><span class="line">minikube stop</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行spring boot demo教程：<a href="https://github.com/trisberg/s1p2017-boot-k8s/blob/master/demo-hello.adoc" target="_blank" rel="noopener">https://github.com/trisberg/s1p2017-boot-k8s/blob/master/demo-hello.adoc</a></p><p>eval $(minikube docker-env)</p><p>打包命令：<br>./mvnw clean package</p><p>kubectl run hello-k8s –image=registry.cn-hangzhou.aliyuncs.com/spring-microservice-exam/hello-k8s –port 8080 –image-pull-policy=IfNotPresent</p><p>kubectl get pods</p><p>kubectl get deployment</p><p>minikube dashboard</p><p>视频教程：<a href="https://www.youtube.com/watch?v=W6J0uBjdSY4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=W6J0uBjdSY4</a><br><a href="https://www.youtube.com/watch?v=SOkN0D9vhAY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=SOkN0D9vhAY</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;k8s官方文档：&lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-minikube/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://kubernetes.io/docs/task
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://ehedgehog.com/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://ehedgehog.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2自定义OAuth2Exception</title>
    <link href="http://ehedgehog.com/2020/02/29/Spring%20Security%20Oauth2%E8%87%AA%E5%AE%9A%E4%B9%89OAuth2Exception/"/>
    <id>http://ehedgehog.com/2020/02/29/Spring%20Security%20Oauth2%E8%87%AA%E5%AE%9A%E4%B9%89OAuth2Exception/</id>
    <published>2020-02-29T15:18:48.000Z</published>
    <updated>2020-02-29T16:05:57.602Z</updated>
    
    <content type="html"><![CDATA[<p>很多场景下后端接口返回的数据格式是统一的，这样统一标准对前后端开发人员都是很友好的</p><p><code>Spring Security Oauth2</code>在登录或鉴权失败时默认会返回的格式跟项目制定的标准返回格式不一致，且描述信息较少，因此需要定制<code>Spring Security Oauth2</code>的返回格式</p><a id="more"></a><p>具体实现如下：</p><h3 id="1-自定义OAuth2Exception"><a href="#1-自定义OAuth2Exception" class="headerlink" title="1 自定义OAuth2Exception"></a>1 自定义OAuth2Exception</h3><p>首先通过继承<code>OAuth2Exception</code>自定义异常类，并指定JSON序列化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义OauthException</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/29 14:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonSerialize</span>(using = CustomOauthExceptionSerializer.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOauthException</span> <span class="keyword">extends</span> <span class="title">OAuth2Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomOauthException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自定义JSON序列化"><a href="#2-自定义JSON序列化" class="headerlink" title="2 自定义JSON序列化"></a>2 自定义JSON序列化</h3><p>注解<code>@JsonSerialize(using = CustomOauthExceptionSerializer.class)</code>表示响应请求是用<code>CustomOauthExceptionSerializer</code>序列化<code>CustomOauthException</code>，<code>CustomOauthExceptionSerializer</code>的逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义OauthException Serializer，定制异常返回结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/29 14:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOauthExceptionSerializer</span> <span class="keyword">extends</span> <span class="title">StdSerializer</span>&lt;<span class="title">CustomOauthException</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomOauthExceptionSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(CustomOauthException.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(CustomOauthException e, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        jsonGenerator.writeStartObject();</span><br><span class="line">        jsonGenerator.writeNumberField(<span class="string">"code"</span>, e.getHttpErrorCode());</span><br><span class="line">        jsonGenerator.writeStringField(<span class="string">"msg"</span>,  e.getMessage());</span><br><span class="line">        jsonGenerator.writeObjectField(<span class="string">"data"</span>, e.getOAuth2ErrorCode());</span><br><span class="line">        <span class="keyword">if</span> (e.getAdditionalInformation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : e.getAdditionalInformation().entrySet()) &#123;</span><br><span class="line">                jsonGenerator.writeStringField(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        jsonGenerator.writeEndObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>OAuth2Exception</code>经过<code>CustomOauthExceptionSerializer</code>序列化后的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"code"</span>:<span class="number">400</span>,</span><br><span class="line"><span class="attr">"msg"</span>:<span class="string">"用户名或密码错误"</span>,</span><br><span class="line"><span class="attr">"data"</span>:<span class="string">"invalid_request"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-配置AuthorizationServerEndpointsConfigurer"><a href="#3-配置AuthorizationServerEndpointsConfigurer" class="headerlink" title="3 配置AuthorizationServerEndpointsConfigurer"></a>3 配置AuthorizationServerEndpointsConfigurer</h3><p>通过配置<code>AuthorizationServerEndpointsConfigurer</code>的<code>exceptionTranslator</code>指定异常转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权服务器配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-03-14 11:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthorizationServerConfigurer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置TokenStore、Token增强、认证管理器以及异常处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints endpoints</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">                <span class="comment">// 将token存储到redis</span></span><br><span class="line">                .tokenStore(tokenStore())</span><br><span class="line">                <span class="comment">// token增强</span></span><br><span class="line">                .tokenEnhancer(jwtTokenEnhancer())</span><br><span class="line">                <span class="comment">// 异常转换</span></span><br><span class="line">                .exceptionTranslator(webResponseExceptionTranslator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebResponseExceptionTranslator&lt;OAuth2Exception&gt; <span class="title">webResponseExceptionTranslator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultWebResponseExceptionTranslator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ResponseEntity&lt;OAuth2Exception&gt; <span class="title">translate</span><span class="params">(Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> OAuth2Exception) &#123;</span><br><span class="line">                    OAuth2Exception exception = (OAuth2Exception) e;</span><br><span class="line">                    <span class="comment">// 转换返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> ResponseEntity.status(exception.getHttpErrorCode()).body(<span class="keyword">new</span> CustomOauthException(e.getMessage()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h3><p>主要原理是扩展<code>Spring Security Oauth2</code>的<code>ExceptionTranslator</code>，指定异常信息的序列化逻辑</p><p>自定义之前的格式：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"unauthorized"</span>,</span><br><span class="line">  <span class="attr">"error_description"</span>: <span class="string">"Full authentication is required to access this resource"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义返回格式后的结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"code"</span>:<span class="number">400</span>,</span><br><span class="line"><span class="attr">"msg"</span>:<span class="string">"用户名或密码错误"</span>,</span><br><span class="line"><span class="attr">"data"</span>:<span class="string">"invalid_request"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整源码：</p><ul><li><a href="https://gitee.com/wells2333/spring-microservice-exam/blob/master/modules/auth-service-parent/auth-service/src/main/java/com/github/tangyi/auth/config/CustomAuthorizationServerConfigurer.java" target="_blank" rel="noopener">CustomAuthorizationServerConfigurer</a></li><li><a href="https://gitee.com/wells2333/spring-microservice-exam" target="_blank" rel="noopener">spring-microservice-exam</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多场景下后端接口返回的数据格式是统一的，这样统一标准对前后端开发人员都是很友好的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring Security Oauth2&lt;/code&gt;在登录或鉴权失败时默认会返回的格式跟项目制定的标准返回格式不一致，且描述信息较少，因此需要定制&lt;code&gt;Spring Security Oauth2&lt;/code&gt;的返回格式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Security" scheme="http://ehedgehog.com/categories/Spring-Security/"/>
    
    
      <category term="Spring Security" scheme="http://ehedgehog.com/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Vue首页Loading效果</title>
    <link href="http://ehedgehog.com/2020/02/29/Vue%E9%A6%96%E9%A1%B5Loading%E6%95%88%E6%9E%9C/"/>
    <id>http://ehedgehog.com/2020/02/29/Vue%E9%A6%96%E9%A1%B5Loading%E6%95%88%E6%9E%9C/</id>
    <published>2020-02-29T03:32:34.000Z</published>
    <updated>2020-02-29T03:52:56.412Z</updated>
    
    <content type="html"><![CDATA[<p>初次访问首页时，由于加载资源耗时比较久，会出现空白页的情况，可以在资源加载结束前增加Loading效果从而提升用户体验</p><h2 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1 实现思路"></a>1 实现思路</h2><p>具体实现思路是在入口的<code>index.html</code>添加你所需的加载提示，让它在页面刚开始加载时默认显示，隐藏主页的root标签</p><p>再在Vue入口的<code>mounted</code>里将加载提示的标签隐藏，再将主页的root标签显示</p><h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2 具体实现"></a>2 具体实现</h2><ol><li><p>首先准备Loading效果图，如：<a href="https://gitee.com/wells2333/spring-microservice-exam/blob/master/frontend/spring-microservice-exam-ui/static/img/spinner.gif" target="_blank" rel="noopener">spinner.gif</a></p></li><li><p>入口index.html</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>硕果云-sg-admin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.preloader-init</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: calc(50% - 65px);</span></span><br><span class="line"><span class="undefined">        left: calc(50% - 65px)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">/static/tinymce4.7.5/tinymce.min.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"preloader-init"</span> <span class="attr">src</span>=<span class="string">"static/img/spinner.gif"</span> <span class="attr">class</span>=<span class="string">"preloader-init"</span> <span class="attr">alt</span>=<span class="string">"spinner"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Vue入口App.vue</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).style.display = <span class="string">'block'</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'preloader-init'</span>).style.display = <span class="string">'none'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-源码示例"><a href="#3-源码示例" class="headerlink" title="3 源码示例"></a>3 源码示例</h2><p><a href="https://gitee.com/wells2333/spring-microservice-exam/tree/master/frontend/spring-microservice-exam-ui" target="_blank" rel="noopener">spring-microservice-exam-ui</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初次访问首页时，由于加载资源耗时比较久，会出现空白页的情况，可以在资源加载结束前增加Loading效果从而提升用户体验&lt;/p&gt;
&lt;h2 id=&quot;1-实现思路&quot;&gt;&lt;a href=&quot;#1-实现思路&quot; class=&quot;headerlink&quot; title=&quot;1 实现思路&quot;&gt;&lt;/a&gt;1
      
    
    </summary>
    
    
      <category term="前端" scheme="http://ehedgehog.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://ehedgehog.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>GC参数示例</title>
    <link href="http://ehedgehog.com/2020/02/28/GC%E5%8F%82%E6%95%B0%E7%A4%BA%E4%BE%8B/"/>
    <id>http://ehedgehog.com/2020/02/28/GC%E5%8F%82%E6%95%B0%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-02-28T10:12:30.000Z</published>
    <updated>2020-02-28T11:01:32.805Z</updated>
    
    <content type="html"><![CDATA[<p>分享生产环境的GC参数配置示例和<a href="https://gitee.com/wells2333/spring-microservice-exam" target="_blank" rel="noopener">考试系统</a>的GC参数配置</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx14g -Xms14g -Xmn6g -XX:+UnlockDiagnosticVMOptions -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:AutoBoxCacheMax=20000 -Xss1m -XX:MaxMetaspaceSize=256m -XX:ParallelGCThreads=10 -XX:ConcGCThreads=6 -XX:PretenureSizeThreshold=104572800 -Dosp_server_mercury_app=mpcsearch-backup.api.vip.com -XX:MaxTenuringThreshold=6 -XX:-UseBiasedLocking -XX:-UseCounterDecay -XX:-OmitStackTraceInFastThrow -Djava.security.egd=file:/dev/urandom -XX:ParGCCardsPerStrideChunk=8192 -XX:+CMSParallelInitialMarkEnabled -XX:+ParallelRefProcEnabled -XX:+ExplicitGCInvokesConcurrent -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dev/shm/ -XX:+PerfDisableSharedMem -XX:+PrintCompressedOopsMode -XX:-PrintGCApplicationStoppedTime</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/wells2333/spring-microservice-exam" target="_blank" rel="noopener">考试系统演示环境</a>的GC参数配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx256m -Xms256m -XX:+UnlockDiagnosticVMOptions -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:AutoBoxCacheMax=20000 -XX:-UseBiasedLocking -XX:-UseCounterDecay -XX:-OmitStackTraceInFastThrow -Djava.security.egd=file:/dev/urandom -XX:+CMSParallelInitialMarkEnabled -XX:+ParallelRefProcEnabled -XX:+ExplicitGCInvokesConcurrent -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -XX:+HeapDumpOnOutOfMemoryError -XX:+PerfDisableSharedMem -XX:+PrintCompressedOopsMode -XX:-PrintGCApplicationStoppedTime</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享生产环境的GC参数配置示例和&lt;a href=&quot;https://gitee.com/wells2333/spring-microservice-exam&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;考试系统&lt;/a&gt;的GC参数配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://ehedgehog.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析--源码编译</title>
    <link href="http://ehedgehog.com/2020/02/28/elasticsearch%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>http://ehedgehog.com/2020/02/28/elasticsearch%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</id>
    <published>2020-02-28T10:12:30.000Z</published>
    <updated>2020-02-28T13:36:40.970Z</updated>
    
    <content type="html"><![CDATA[<p>elasticsearch源码分析–源码编译，版本:v6.1.2</p><a id="more"></a><p>环境版本：</p><p>jdk: 1.8.0_121</p><p><a href="https://gradle.org/" target="_blank" rel="noopener">gradle</a>: 4.6</p><p>这里推推荐安装工具<a href="https://sdkman.io/" target="_blank" rel="noopener">sdkman</a>，安装<a href="https://sdkman.io/" target="_blank" rel="noopener">sdkman</a>后，通过以下命令安装<a href="https://gradle.org/" target="_blank" rel="noopener">gradle</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install gradle 4.6</span><br></pre></td></tr></table></figure><h2 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1 下载源码"></a>1 下载源码</h2><p>源码托管在GitHub，可以“git clone”最新的master分支或某个tag，也可以直接下载源码压缩包，解压到指定目录，以v6.1.2为例：</p><p>下载源码压缩包，解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xzvf elasticsearch-6.1.2.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2 编译"></a>2 编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd elasticsearch-6.1.2</span><br><span class="line">$ ./gradlew assemble</span><br></pre></td></tr></table></figure><p>编译完成后，提示“BUILD SUCCESSFUL”代表编译成功</p><h2 id="3-导入IntelliJ-IDEA"><a href="#3-导入IntelliJ-IDEA" class="headerlink" title="3 导入IntelliJ IDEA"></a>3 导入IntelliJ IDEA</h2><p>首先运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradle idea</span><br></pre></td></tr></table></figure><p>打开IntelliJ IDEA，选择“Import Project”，选择elasticsearch-6.1.2目录，点击open即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elasticsearch源码分析–源码编译，版本:v6.1.2&lt;/p&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://ehedgehog.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://ehedgehog.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>分布式理论之高可用划分</title>
    <link href="http://ehedgehog.com/2020/02/28/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B9%8B%E9%AB%98%E5%8F%AF%E7%94%A8%E5%88%92%E5%88%86/"/>
    <id>http://ehedgehog.com/2020/02/28/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%E4%B9%8B%E9%AB%98%E5%8F%AF%E7%94%A8%E5%88%92%E5%88%86/</id>
    <published>2020-02-28T10:12:30.000Z</published>
    <updated>2020-02-28T13:11:26.981Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="分布式理论之高可用划分"><a href="#分布式理论之高可用划分" class="headerlink" title="分布式理论之高可用划分"></a>分布式理论之高可用划分</h2><table><thead><tr><th>可用比</th><th>不可用时间（一年）</th><th>应用类别</th></tr></thead><tbody><tr><td>99%</td><td>3天15小时</td><td>批处理系统等</td></tr><tr><td>99.9%</td><td>8小时45分钟</td><td>内部系统如知识管理</td></tr><tr><td>99.95%</td><td>4小时22分钟</td><td>交易系统</td></tr><tr><td>99.99%</td><td>52分钟</td><td>视频、广播系统</td></tr><tr><td>99.999%</td><td>5分钟</td><td>ATM系统</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;分布式理论之高可用划分&quot;&gt;&lt;a href=&quot;#分布式理论之高可用划分&quot; class=&quot;headerlink&quot; title=&quot;分布式理论之高可用划分&quot;&gt;&lt;/a&gt;分布式理论之高可用划分&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr
      
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://ehedgehog.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>elk日志平台搭建</title>
    <link href="http://ehedgehog.com/2019/08/20/elk%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://ehedgehog.com/2019/08/20/elk%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</id>
    <published>2019-08-20T14:46:33.000Z</published>
    <updated>2020-02-29T04:05:51.708Z</updated>
    
    <content type="html"><![CDATA[<p>　　基于docker、docker-compose搭建elk环境，在spring boot应用里采集日志。<br>　　<br><a id="more"></a></p><h2 id="1-elk环境搭建"><a href="#1-elk环境搭建" class="headerlink" title="1 elk环境搭建"></a>1 elk环境搭建</h2><h3 id="1-1-拉取镜像"><a href="#1-1-拉取镜像" class="headerlink" title="1.1 拉取镜像"></a>1.1 拉取镜像</h3><p>采用的镜像是<code>sebp/elk</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull sebp/elk</span><br></pre></td></tr></table></figure><p>启动elk的docker-compose-elk.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  elk:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">sebp/elk</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">elk</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5601:5601"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"9200:9200"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5044:5044"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ES_JAVA_OPTS=-Xms256m</span> <span class="bullet">-Xmx256m</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">"unless-stopped"</span></span><br></pre></td></tr></table></figure><p><img src="/images/elk日志平台搭建/docker-compose-elk.jpg" alt="image"></p><p>启动命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -f docker-compose-elk.yml up -d &amp;&amp; docker-compose -f docker-compose-elk.yml ps</span><br></pre></td></tr></table></figure><h3 id="1-2-修改配置"><a href="#1-2-修改配置" class="headerlink" title="1.2 修改配置"></a>1.2 修改配置</h3><p>主要是去掉ssl的配置，首先进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it elk /bin/bash</span><br></pre></td></tr></table></figure><p>修改<code>/etc/logstash/config.d/02-beats-input.conf</code>为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/elk日志平台搭建/logstash-config.jpg" alt="image"></p><p>退出容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exit</span><br></pre></td></tr></table></figure><p>重启elk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -f docker-compose-elk.yml stop</span><br><span class="line"></span><br><span class="line">$ docker-compose -f docker-compose-elk.yml up -d &amp;&amp; docker-compose -f docker-compose-elk.yml ps</span><br></pre></td></tr></table></figure><h2 id="2-logback配置"><a href="#2-logback配置" class="headerlink" title="2 logback配置"></a>2 logback配置</h2><p>首先pom.xml增加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logstash --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logstash.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置logback.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输出到logstash的appender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"logstash"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- logstash的IP和端口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">destination</span>&gt;</span>localhost:5044<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- Level: FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"debug"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"logstash"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3 效果"></a>3 效果</h2><p><img src="/images/elk日志平台搭建/kibana.jpg" alt="image"></p><h2 id="4-源码地址"><a href="#4-源码地址" class="headerlink" title="4 源码地址"></a>4 源码地址</h2><p><a href="https://gitee.com/wells2333/spring-microservice-exam" target="_blank" rel="noopener">spring-microservice-exam</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　基于docker、docker-compose搭建elk环境，在spring boot应用里采集日志。&lt;br&gt;　　&lt;br&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring boot" scheme="http://ehedgehog.com/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://ehedgehog.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>基于docker安装FastDfs</title>
    <link href="http://ehedgehog.com/2019/08/11/%E5%9F%BA%E4%BA%8Edocker%E5%AE%89%E8%A3%85FastDfs/"/>
    <id>http://ehedgehog.com/2019/08/11/%E5%9F%BA%E4%BA%8Edocker%E5%AE%89%E8%A3%85FastDfs/</id>
    <published>2019-08-11T04:25:54.000Z</published>
    <updated>2020-02-29T03:54:26.045Z</updated>
    
    <content type="html"><![CDATA[<p>　　主要介绍基于docker安装FastDfs，包括tracker、storage、Nginx，注意这只是用来搭建开发测试环境，不可用于生产环境。</p><a id="more"></a><h2 id="1-拉镜像"><a href="#1-拉镜像" class="headerlink" title="1 拉镜像"></a>1 拉镜像</h2><p>使用的镜像是<code>morunchang/fastdfs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker pull morunchang/fastdfs</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-运行镜像"><a href="#2-运行镜像" class="headerlink" title="2 运行镜像"></a>2 运行镜像</h2><p>运行tracker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker run -d --name tracker --net=host morunchang/fastdfs sh tracker.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行storage，指定tracker的IP、组名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker run -d --name storage --net=host -e TRACKER_IP=172.24.42.48:22122 -e GROUP_NAME=group1 morunchang/fastdfs sh storage.sh  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-修改Nginx配置"><a href="#3-修改Nginx配置" class="headerlink" title="3 修改Nginx配置"></a>3 修改Nginx配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker exec -it storage  /bin/bash</span><br><span class="line"></span><br><span class="line">cd data</span><br><span class="line"></span><br><span class="line">$ vi /data/nginx/conf/nginx.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location /group1/M00 &#123;</span><br><span class="line"></span><br><span class="line">    proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line"></span><br><span class="line">    proxy_cache http-cache;</span><br><span class="line"></span><br><span class="line">    proxy_cache_valid 20030412h;</span><br><span class="line"></span><br><span class="line">    proxy_cache_key $uri$is_args$args;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://fdfs_group1;</span><br><span class="line"></span><br><span class="line">    expires 30d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-重启容器"><a href="#4-重启容器" class="headerlink" title="4 重启容器"></a>4 重启容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker restart tracker</span><br><span class="line"></span><br><span class="line">$ docker restart storage</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　主要介绍基于docker安装FastDfs，包括tracker、storage、Nginx，注意这只是用来搭建开发测试环境，不可用于生产环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="FastDfs" scheme="http://ehedgehog.com/tags/FastDfs/"/>
    
  </entry>
  
  <entry>
    <title>唯品会面试分享</title>
    <link href="http://ehedgehog.com/2019/06/28/%E5%94%AF%E5%93%81%E4%BC%9A%E9%9D%A2%E8%AF%95%E5%88%86%E4%BA%AB/"/>
    <id>http://ehedgehog.com/2019/06/28/%E5%94%AF%E5%93%81%E4%BC%9A%E9%9D%A2%E8%AF%95%E5%88%86%E4%BA%AB/</id>
    <published>2019-06-28T08:36:39.000Z</published>
    <updated>2020-02-29T04:00:42.339Z</updated>
    
    <content type="html"><![CDATA[<p>　　分享一下昨天在广州唯品会总部的一次面试的面试题，总共4轮面试，前3轮为技术面，最后一轮hr面，一共面了3个多小时。</p><a id="more"></a><h2 id="一、大致内容"><a href="#一、大致内容" class="headerlink" title="一、大致内容"></a>一、大致内容</h2><p>问题具体的细节记得不太清了，大致内容有：</p><p>Java内存模型，gc算法，有哪些垃圾收集器，他们的特点，可达性分析，根搜索算法，根指的是什么，Class类加载到哪里，实际应用和参数调优经验</p><p>gc复制算法，永久代用什么收集算法，复制过程中to满了怎么处理</p><p>bio和nio的区别，selector模型</p><p>HashMap的数据结构，有序的map有哪些，ConcurrentHashMap的实现原理</p><p>平衡二叉树和红黑树的区别</p><p>juc包的应用，LinkedBlockingQueue的应用，消费队列过慢、队列过长怎么办，队列长度如何配置</p><p>Future接口的应用，多个任务并发，如何等待耗时最长的任务</p><p>Executor框架结构，线程池的实现原理，包括线程池类型，新任务处理过程，线程预热，任务队列，拒绝策略等</p><p>spring ioc和aop原理，如何实现动态代理，实际应用</p><p>spring boot的理解和实现原理</p><p>spring cloud 常用组件介绍和实现原理</p><p>spring cloud gateway和zuul对比，动态路由实现方式，细节探讨，如内存里用什么数据结构保存路由信息，假如不用框架怎么实现动态路由，用什么数据结构保存路由数据，动态更新路由时，其它请求进来了怎么处理，聊了一下cas，自旋这些</p><p>zk的理解，节点类型，如何保证高可用，watcher机制，base理论、cap理论、zab协议，除了zk以外的类似的中间件，consul，eureka</p><p>zk，consul，eureka对比，解释原理，作用，区别，为什么选consul而不是eureka</p><p>Redis数据类型，集群方式，为什么Redis单线程也能扛这么高的并发</p><p>如何实现分布式锁，基于redis，基于zk</p><p>RabbitMq的一些作用和应用场景</p><p>dubbo原理，如何基于zk实现服务注册与发现的，除了心跳，如何快速感知服务挂掉并做服务剔除的，rpc原理，负载均衡策略</p><p>docker的理解，资源隔离原理，怎么隔离CPU和内存资源，docker实际应用，k8s理解</p><p>tcp三次握手四次挥手</p><p>http协议的结构，上传文件流的时候的结构，multplipart如何解析的</p><p>vue常用组件，router，axios</p><p>linux常用命令</p><p>平时会不会翻jdk源码</p><p>有没有了解python</p><p>还有就是项目里的一些的细节讨论，一般问假如出现这样那样的问题，你会怎么做</p><h2 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h2><p>总的来说就是问了一些Java基础，结合项目探讨一些框架原理、应用等，没有涉及设计模式、数据库方面</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　分享一下昨天在广州唯品会总部的一次面试的面试题，总共4轮面试，前3轮为技术面，最后一轮hr面，一共面了3个多小时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://ehedgehog.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://ehedgehog.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>在线考试系统V2.0镜像构建、推送、部署</title>
    <link href="http://ehedgehog.com/2019/04/22/%E5%9C%A8%E7%BA%BF%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9FV2.0%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E3%80%81%E6%8E%A8%E9%80%81%E3%80%81%E9%83%A8%E7%BD%B2/"/>
    <id>http://ehedgehog.com/2019/04/22/%E5%9C%A8%E7%BA%BF%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9FV2.0%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E3%80%81%E6%8E%A8%E9%80%81%E3%80%81%E9%83%A8%E7%BD%B2/</id>
    <published>2019-04-22T12:38:07.000Z</published>
    <updated>2020-07-04T02:36:11.436Z</updated>
    
    <content type="html"><![CDATA[<p>以在线考试系统<a href="https://gitee.com/wells2333/spring-microservice-exam" target="_blank" rel="noopener">spring-microservice-exam</a>为例，将本地源码打包成镜像推送到阿里云镜像仓库，在腾讯云服务器上拉取镜像部署</p><a id="more"></a><h2 id="1-前提"><a href="#1-前提" class="headerlink" title="1 前提"></a>1 前提</h2><ol><li><p>本地安装docker、docker-compose</p></li><li><p>注册阿里云账号</p></li></ol><p>源码地址：<a href="https://gitee.com/wells2333/spring-microservice-exam" target="_blank" rel="noopener">spring-microservice-exam</a></p><h2 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2 步骤"></a>2 步骤</h2><h3 id="2-1-在本地开发环境构建镜像"><a href="#2-1-在本地开发环境构建镜像" class="headerlink" title="2.1 在本地开发环境构建镜像"></a>2.1 在本地开发环境构建镜像</h3><p>后端项目</p><p>在<code>spring-microservice-exam</code>目录下运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean package</span><br></pre></td></tr></table></figure><p>docker插件配置打包的同时构建镜像</p><p><img src="/images/在线考试系统V2.0镜像构建、推送、部署/config_docker_mvn.png" alt="image"></p><p>构建成功：</p><p><img src="/images/在线考试系统V2.0镜像构建、推送、部署/config_docker_mvn_success.png" alt="image"></p><p>前端项目</p><p>以<code>spring-microservice-exam-ui</code>为例，在<code>spring-microservice-exam-ui</code>目录下运行打包命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>运行成功后会生成<code>dist</code>目录，里面是项目的静态资源，再运行构建镜像命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t registry.cn-hangzhou.aliyuncs.com/spring-microservice-exam/spring-microservice-exam-ui:2.0 .</span><br></pre></td></tr></table></figure><p>本地试运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 --name spring-microservice-exam-ui registry.cn-hangzhou.aliyuncs.com/spring-microservice-exam/spring-microservice-exam-ui:2.0</span><br></pre></td></tr></table></figure><h3 id="2-2-创建命名空间和镜像仓库"><a href="#2-2-创建命名空间和镜像仓库" class="headerlink" title="2.2 创建命名空间和镜像仓库"></a>2.2 创建命名空间和镜像仓库</h3><p>登录阿里云控制台，在<strong>容器镜像服务</strong>菜单下，创建<code>spring-microservice-exam</code>命名空间和各服务的仓库</p><p>如：<code>config-service</code>、<code>auth-service</code>、<code>spring-microservice-ui</code></p><p><img src="/images/在线考试系统V2.0镜像构建、推送、部署/aliyun.png" alt="image"></p><h3 id="2-3-在开发环境将镜像推送到仓库"><a href="#2-3-在开发环境将镜像推送到仓库" class="headerlink" title="2.3 在开发环境将镜像推送到仓库"></a>2.3 在开发环境将镜像推送到仓库</h3><p>以<code>config-service</code>为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push registry.cn-hangzhou.aliyuncs.com/spring-microservice-exam/config-service:2.0</span><br></pre></td></tr></table></figure><h3 id="2-4-登录腾讯云服务器，拉取镜像"><a href="#2-4-登录腾讯云服务器，拉取镜像" class="headerlink" title="2.4 登录腾讯云服务器，拉取镜像"></a>2.4 登录腾讯云服务器，拉取镜像</h3><p>登录阿里云Docker Registry：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login --username=你的阿里云账号 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure><p>拉取镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull registry.cn-hangzhou.aliyuncs.com/spring-microservice-exam/config-service:2.0</span><br></pre></td></tr></table></figure><h3 id="2-5-运行镜像"><a href="#2-5-运行镜像" class="headerlink" title="2.5 运行镜像"></a>2.5 运行镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 8769:8769 --name config-service registry.cn-hangzhou.aliyuncs.com/spring-microservice-exam/config-service:2.0</span><br></pre></td></tr></table></figure><h2 id="3-docker常用命令"><a href="#3-docker常用命令" class="headerlink" title="3 docker常用命令"></a>3 docker常用命令</h2><ol><li>查看所有容器：<code>docker ps -a</code></li><li>删除镜像：<code>docker rmi imageId</code></li><li>删除容器：<code>docker rm containerId</code></li><li>直接运行一个停止的容器：<code>docker start containerId</code></li><li>进入容器：<code>docker exec -it 09d2a6ee4095 /bin/bash</code></li><li>退出容器：<code>exit</code></li><li>将容器打包成镜像：<code>docker commit containerId imageName，如：docker commit 1f9dfc05e3ad spring-microservice-exam-mysql</code></li></ol><h2 id="4-docker-compose"><a href="#4-docker-compose" class="headerlink" title="4 docker-compose"></a>4 docker-compose</h2><h3 id="4-1-基本命令"><a href="#4-1-基本命令" class="headerlink" title="4.1 基本命令"></a>4.1 基本命令</h3><ol><li><p>启动镜像：<code>docker-compose up</code></p></li><li><p>后台启动：<code>docker-compose up -d // 后台启动并运行容器</code></p></li><li><p>指定配置文件：<code>docker-compose -f docker-compose-base.yml up</code></p></li><li><p>构建服务：<code>docker-compose -f docker-compose-base.yml build</code></p></li><li><p>列出所有容器：<code>docker-compose ps</code></p></li><li><p>删除容器：<code>docker-compose rm container，如：docker-compose rm config-service</code></p></li><li><p>停止正在运行的容器：<code>docker-compose stop</code></p></li></ol><h3 id="4-2-使用示例"><a href="#4-2-使用示例" class="headerlink" title="4.2 使用示例"></a>4.2 使用示例</h3><p>MySQL镜像构建、运行、初始化的docker-compose例子：</p><p>docker-compose-env.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="attr">spring-microservice-exam-mysql:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line">    <span class="comment"># 自动执行初始化脚本</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./doc/deploy/mysql:/docker-entrypoint-initdb.d/</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    MYSQL_ROOT_PASSWORD:</span> <span class="number">11</span> <span class="comment"># root账户的密码</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">spring-microservice-exam-mysql</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>         <p>运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-comopse -f docker-comopse-env.yml up</span><br></pre></td></tr></table></figure> <h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5 参考资料"></a>5 参考资料</h2><ul><li><a href="https://www.cnblogs.com/yufeng218/p/8370670.html" target="_blank" rel="noopener">安装docker</a></li><li><a href="https://www.jianshu.com/p/94760f35c98c" target="_blank" rel="noopener">安装docker-compose</a></li><li><a href="https://blog.csdn.net/qq_34531925/article/details/81201928" target="_blank" rel="noopener">使用阿里云加速</a></li><li><a href="http://www.pianshen.com/article/435196681/" target="_blank" rel="noopener">docker compose实战</a></li><li><a href="https://zhengyunfei.iteye.com/blog/2430133" target="_blank" rel="noopener">docker 容器变成镜像提交到阿里云镜像仓库</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以在线考试系统&lt;a href=&quot;https://gitee.com/wells2333/spring-microservice-exam&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;spring-microservice-exam&lt;/a&gt;为例，将本地源码打包成镜像推送到阿里云镜像仓库，在腾讯云服务器上拉取镜像部署&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring cloud" scheme="http://ehedgehog.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构下的安全设计方案</title>
    <link href="http://ehedgehog.com/2019/03/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/"/>
    <id>http://ehedgehog.com/2019/03/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</id>
    <published>2019-03-23T09:14:04.000Z</published>
    <updated>2019-07-14T05:33:17.779Z</updated>
    
    <content type="html"><![CDATA[<p>　　主要探讨一下在微服务架构下的一下安全设计方面的内容，包括JWT、OAuth2.0以及如何使用Spring Cloud Security实现保护服务接口、服务间的鉴权等。</p><a id="more"></a><h2 id="1-微服务安全设计原则"><a href="#1-微服务安全设计原则" class="headerlink" title="1 微服务安全设计原则"></a>1 微服务安全设计原则</h2><p>　　微服务安全是在实际应用中的一个很普遍要求，安全主要关心<code>调用者是谁</code>， <code>调用者能干什么</code>， 以及<code>如何传播这个信息</code>，也就是常说的服务间的认证和授权。</p><p>原则：</p><ul><li>单点登录：微服务架构下，实现用户只需要登录一次就能访问所有相互信任的应用系统。</li><li>无状态：前后端分离，后端不保存用户Session，每次请求都要鉴权</li><li>细粒度：每个组件管理自己的功能权限，需要实先确定好权限</li><li>非浏览器客户端的操作性：需要考虑到那些非浏览器端的客户请求，对其提供良好的支持</li></ul><h2 id="2-微服务常见的认证方案"><a href="#2-微服务常见的认证方案" class="headerlink" title="2 微服务常见的认证方案"></a>2 微服务常见的认证方案</h2><h3 id="2-1-分布式Session"><a href="#2-1-分布式Session" class="headerlink" title="2.1 分布式Session"></a>2.1 分布式Session</h3><p>　　传统的单体应用的<code>session</code>，在Spring cloud微服务架构下，可以采用<code>分布式session</code>机制，可以将用户的认证信息存储在共享存储（如redis）中，用户会话作为key实现简单的分布式哈希映射，当用户访问微服务时，用户数据可以从共享存储中获取。<code>Spring Session</code>对分布式Session提供了支持，也与<code>Spring Boot/Cloud</code>无缝集成。</p><h3 id="2-2-API-Tokens"><a href="#2-2-API-Tokens" class="headerlink" title="2.2 API Tokens"></a>2.2 API Tokens</h3><p>　　随着 <code>Restful API</code>、<code>微服务</code>的兴起，基于 <code>Token</code> 的认证现在已经相当普遍了。</p><p>　　<code>Token</code>一般会包含用户的相关信息，其它微服务可以从<code>Token</code>里提取出用户、权限等信息完成鉴权。</p><p>基于Token认证的典型流程：</p><p><img src="/images/微服务架构下的安全设计方案/Api Tokens.png" alt="image"></p><ol><li>用户使用包含用户名和密码的credential从客户端发起资源请求。</li><li>后端接受请求，通过授权中心，生产有效token字符串，返回给客户端。</li><li>客户端获得token后，再次发出资源请求。</li><li>后端接受带token的请求，通过授权中心，获取相关资源，返回给客户端。</li></ol><p>优点：</p><ul><li>服务端无状态：服务端不需要存储Session，因为Token已携带用户的相关信息</li><li>性能好：校验Token不需要访问远程服务或数据库</li><li>支持移动端</li><li>支持跨程序、跨域调用</li></ul><p>缺点：</p><ul><li>每次用户请求需要携带有效token，与Auth服务进行交互验证</li><li>Auth服务可能需要处理大量的生产token的操作，可能存在性能问题</li></ul><p>　　基于Token的认证方案，业界推荐使用 <a href="https://jwt.io/" target="_blank" rel="noopener">JSON Web Tokens（JWT）</a>，它足够简单且支持程度也比较好</p><h2 id="3-JWT"><a href="#3-JWT" class="headerlink" title="3 JWT"></a>3 JWT</h2><p>　　<a href="https://jwt.io/" target="_blank" rel="noopener">JSON Web Tokens（JWT）</a>是一种<code>认证协议</code>，是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（RFC 7519）。JWT 一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 Token 也可直接被用于认证，也可被加密。</p><p>　　<code>授权服务器</code>将用户信息和授权范围序列化后放入一个JSON字符串，然后使用<code>Base64</code>进行编码，最终在授权服务器用私钥对这个字符串进行签名，得到一个<code>JSON Web Token</code>。</p><p>　　假设其他所有的<code>资源服务器</code>都将持有一个<code>RSA公钥</code>，当资源服务器接收到这个在<code>Http Header</code>中存有<code>Token</code>的请求，资源服务器就可以拿到这个<code>Token</code>，并验证它是否使用正确的私钥签名（是否经过授权服务器签名，也就是验签）。验签通过，反序列化后就拿到<code>Toekn</code>中包含的有效验证信息。</p><h3 id="3-1-JWT认证流程"><a href="#3-1-JWT认证流程" class="headerlink" title="3.1 JWT认证流程"></a>3.1 JWT认证流程</h3><p><img src="/images/微服务架构下的安全设计方案/jwt.png" alt="image"></p><ul><li>客户端调用登录接口（或者获取 token 接口），传入用户名密码。</li><li>服务端请求身份认证中心，确认用户名密码正确。</li><li>服务端创建 JWT，返回给客户端。</li><li>客户端拿到 JWT，进行存储（可以存储在缓存中，也可以存储在数据库中，如果是浏览器，可以存储在 Cookie 中）在后续请求中，在 HTTP 请求头中加上 JWT。</li><li>服务端校验 JWT，校验通过后，返回相关资源和数据。</li></ul><h3 id="3-2-JWT数据结构"><a href="#3-2-JWT数据结构" class="headerlink" title="3.2 JWT数据结构"></a>3.2 JWT数据结构</h3><p><img src="/images/微服务架构下的安全设计方案/jwt structrue.png" alt="image"></p><p>　　JWT 是由三段信息构成的，第一段为头部（Header），第二段为载荷（Payload)，第三段为签名（Signature）。每一段内容都是一个 JSON 对象，将每一段 JSON 对象采用 <code>BASE64 编码</code>，将编码后的内容用. 链接一起就构成了 JWT 字符串。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">header.payload.signature</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>头部（header）</li></ol><p>　　头部用于描述关于该 JWT 的最基本的信息，例如其类型以及签名所用的算法等</p><p>　　指明了类型为JWT，签名算法是 <code>RS256</code>算法的header</p><p><img src="/images/微服务架构下的安全设计方案/jwt header.png" alt="image"></p><ol start="2"><li>载荷（payload）</li></ol><p>　　载荷也是body，是存放有效信息的地方。有效信息包含以下内容：</p><p><img src="/images/微服务架构下的安全设计方案/jwt body.png" alt="image"></p><table><thead><tr><th>声明项</th><th>描述</th></tr></thead><tbody><tr><td>iss</td><td>JWT 签发者</td></tr><tr><td>sub</td><td>JWT 所面向的用户</td></tr><tr><td>aud</td><td>接收 JWT 的一方，如： 测试环境用account-d.docusign.com，正式环境用account.docusign.com</td></tr><tr><td>exp</td><td>JWT 的过期时间，这个过期时间必须要大于签发时间</td></tr><tr><td>iat</td><td>JWT 的签发时间</td></tr><tr><td>scope</td><td>JWT 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。</td></tr></tbody></table><p>除了上面的默认字段外，我们还可以自定义私有字段，如：</p><p><img src="/images/微服务架构下的安全设计方案/Jwt payload.png" alt="image"></p><ol start="3"><li>签名（signature)</li></ol><p>　　创建签名需要使用 <code>Base64</code> 编码后的 <code>header</code> 和 <code>payload</code> 以及一个<code>秘钥</code>，将 base64 编码后的 <code>header</code> 和 <code>base64</code> 编码后的 <code>payload</code> 使用<code>.</code>连接组成的字符串，通过 header 中声明的加密方式进行<code>加盐 secret</code> 组合加密，然后就构成了 jwt 的第三部分。</p><p><img src="/images/微服务架构下的安全设计方案/jwt signature.png" alt="image"></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs256sign(&lt;base64URL-encoded header&gt;.&lt;base64URL-encoded body&gt;)</span><br></pre></td></tr></table></figure><p>JWT 的优点：</p><ul><li>跨语言，JSON 的格式保证了跨语言的支撑</li><li>基于 token，无状态</li><li>占用字节小，便于传输</li></ul><p>关于 token 注销：</p><p>　　token 的注销，由于 token 不存储在服务端，由客户端存储，当用户注销时，token 的有效时间还没有到，还是有效的。所以如何在用户注销登录时让 token 注销是一个要关注的点。一般有如下几种方式：</p><ul><li>token 存储在<code>localStorage</code>中，这样客户端注销时，自然可以清空掉</li><li>注销时，将 token 存放到<code>分布式缓存</code>中，每次校验 token 时检查下该 token 是否已注销。不过这样也就失去了快速校验 token 的优点。</li><li>采用短期令牌，比如token有效期是 20 分钟，这样可以一定程度上降低注销后 token 可用性的风险。</li></ul><h2 id="4-Oauth2"><a href="#4-Oauth2" class="headerlink" title="4 Oauth2"></a>4 Oauth2</h2><p>　　<a href="http://en.wikipedia.org/wiki/OAuth" target="_blank" rel="noopener">OAuth</a>是一个关于授权（authorization）的开放网络标准，在业界得到广泛应用，目前的版本是2.0版。</p><p>　　简单来说就是客户端应用程序（通常是web浏览器）代表用户（得到了用户的批准）去访问受保护的资源</p><p>　　举个例子，你想登录豆瓣去看看电影评论，但你从来没注册过豆瓣账号，又不想新注册一个再使用豆瓣，怎么办呢？不用担心，豆瓣已经为你这种懒人做了准备，用你的qq号可以授权给豆瓣进行登录，请看。</p><p><strong>第一步：在豆瓣官网点击用qq登录</strong></p><p><img src="/images/微服务架构下的安全设计方案/douban.png" alt="image"></p><p><strong>第二步：跳转到qq登录页面输入用户名密码，然后点授权并登录</strong></p><p><img src="/images/微服务架构下的安全设计方案/qq.png" alt="image"></p><p><strong>第三步：跳回到豆瓣页面，成功登录</strong></p><p><img src="/images/微服务架构下的安全设计方案/login success.png" alt="image"></p><p><strong>上帝视角</strong></p><p><img src="/images/微服务架构下的安全设计方案/authorize.png" alt="image"></p><h3 id="4-1-四个角色"><a href="#4-1-四个角色" class="headerlink" title="4.1 四个角色"></a>4.1 四个角色</h3><ol><li>资源拥有者（如用户）</li><li>授权服务器（Authorization Server） </li><li>资源服务器（Resource Server）</li><li>客户端（Client application）</li></ol><h3 id="4-2-运行流程"><a href="#4-2-运行流程" class="headerlink" title="4.2 运行流程"></a>4.2 运行流程</h3><p><img src="/images/微服务架构下的安全设计方案/Oauth2.0.png" alt="image"></p><ol><li>用户打开客户端以后，客户端要求用户给予授权</li><li>用户同意给予客户端授权</li><li>客户端使用上一步获得的授权，向认证服务器申请令牌</li><li>认证服务器对客户端进行认证以后，确认无误，同意发放令牌</li><li>客户端使用令牌，向资源服务器申请获取资源</li><li>资源服务器确认令牌无误，同意向客户端开放资源</li></ol><h3 id="4-3-客户端的授权模式"><a href="#4-3-客户端的授权模式" class="headerlink" title="4.3 客户端的授权模式"></a>4.3 客户端的授权模式</h3><p>　　客户端必须得到用户的授权（Authorization Grant），才能获得令牌（access token）。OAuth 2.0 定义了四种授权方式：<code>authorization code</code>、<code>implicit</code>、<code>resource owner password credentials</code>、<code>client credentials</code>。</p><h4 id="4-3-1-授权码模式"><a href="#4-3-1-授权码模式" class="headerlink" title="4.3.1 授权码模式"></a>4.3.1 授权码模式</h4><p>　　<code>授权码模式（authorization code）</code>是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。流程如下：</p><ol><li>用户访问客户端，后者将前者导向认证服务器。</li><li>用户选择是否给予客户端授权。</li><li>假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向 URI”（redirection URI），同时附上一个授权码。</li><li>客户端收到授权码，附上早先的”重定向 URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</li><li>认证服务器核对了授权码和重定向 URI，确认无误后，向客户端发送<code>访问令牌（access token）</code>和<code>更新令牌（refresh token）</code>。</li></ol><p>例子：</p><h4 id="4-3-2-简化模式"><a href="#4-3-2-简化模式" class="headerlink" title="4.3.2 简化模式"></a>4.3.2 简化模式</h4><p>　　<code>简化模式（Implicit Grant Type）</code>不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。流程如下：</p><ol><li>客户端将用户导向认证服务器。</li><li>用户决定是否给于客户端授权。</li><li>假设用户给予授权，认证服务器将用户导向客户端指定的”重定向 URI”，并在 URI 的 Hash 部分包含了访问令牌。</li><li>浏览器向资源服务器发出请求，其中不包括上一步收到的 Hash 值。</li><li>资源服务器返回一个网页，其中包含的代码可以获取 Hash 值中的令牌。</li><li>浏览器执行上一步获得的脚本，提取出令牌。</li><li>浏览器将令牌发给客户端。</li></ol><h4 id="4-3-3-密码模式"><a href="#4-3-3-密码模式" class="headerlink" title="4.3.3 密码模式"></a>4.3.3 密码模式</h4><p>　　<code>密码模式（Resource Owner Password Credentials）</code>中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。流程如下：</p><ol><li>用户向客户端提供用户名和密码。</li><li>客户端将用户名和密码发给认证服务器，向后者请求令牌。</li><li>认证服务器确认无误后，向客户端提供访问令牌。</li></ol><h4 id="4-3-4-客户端模式"><a href="#4-3-4-客户端模式" class="headerlink" title="4.3.4 客户端模式"></a>4.3.4 客户端模式</h4><p>　　<code>客户端模式（Client Credentials Grant）</code>指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。</p><p>　　在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。流程如下：</p><ol><li>客户端向认证服务器进行身份认证，并要求一个访问令牌。</li><li>认证服务器确认无误后，向客户端提供访问令牌。</li></ol><h2 id="5-Spring-Cloud-Security解决方案"><a href="#5-Spring-Cloud-Security解决方案" class="headerlink" title="5 Spring Cloud Security解决方案"></a>5 Spring Cloud Security解决方案</h2><p>原理：</p><p><img src="/images/微服务架构下的安全设计方案/microservice security with OAuth2.png" alt="image"></p><h3 id="5-1-Spring-Cloud-Security"><a href="#5-1-Spring-Cloud-Security" class="headerlink" title="5.1 Spring Cloud Security"></a>5.1 Spring Cloud Security</h3><p>　　<code>Spring Cloud Security</code>包含了<code>Spring Security</code>和<code>Spring Security Oauth</code></p><ol><li>基于OAuth2 和 OpenID协议的可配置的SSO登录机制</li><li>基于tokens保障资源访问安全</li><li>引入UAA（User Account and Authentication）鉴权服务，UAA是一个Web服务，用于管理账户、Oauth2客户端和用户用于鉴权的问题令牌(Issue Token)</li></ol><p>　　实现了Oauth 2授权框架和基于JWT(JSON web tokens)的问题令牌</p><p>　　基于OAuth2，当用户访问客户端应用时，生成并发放token给目标客户端</p><p>主要内容：</p><ol><li>认证对象：如用户、客户端以及目标资源服务器</li><li>认证类型：主要有授权码模式、密码模式以及客户端模式</li><li>认证范围：即认证权限，并作为一个命名的参数附加到AccessToken上</li></ol><h3 id="5-2-Spring-Cloud-Security实战"><a href="#5-2-Spring-Cloud-Security实战" class="headerlink" title="5.2 Spring Cloud Security实战"></a>5.2 Spring Cloud Security实战</h3><h4 id="5-2-1-组件"><a href="#5-2-1-组件" class="headerlink" title="5.2.1 组件"></a>5.2.1 组件</h4><p><img src="/images/微服务架构下的安全设计方案/Spring Cloud Security.png" alt="image"></p><p>主要组件：</p><ol><li>consul：提供服务注册与发现功能</li><li>consul-gateway：基于<code>Spring Cloud Gateway</code>的网关，对外提供统一的api入口</li><li>consul-auth：基于<code>Spring Cloud Securit</code>y的鉴权服务</li><li>consul-provider：业务组件，资源服务器</li><li>consul-consumer：业务组件，，资源服务器，基于<code>openfeign</code>消费consul-provider服务</li></ol><p>consul-auth组件作为授权服务器，配置了客户端的认证类型和认证范围：</p><ol><li>认证类型为<code>authorization_code</code>、<code>password</code>两种</li><li>认证范围为<code>read</code>、<code>write</code></li></ol><p><img src="/images/微服务架构下的安全设计方案/client config.png" alt="image"></p><p><img src="/images/微服务架构下的安全设计方案/clients.png" alt="image"></p><h4 id="5-2-2-授权码模式"><a href="#5-2-2-授权码模式" class="headerlink" title="5.2.2 授权码模式"></a>5.2.2 授权码模式</h4><p>客户端使用<code>authorization_code</code>授权方式，步骤如下：</p><ol><li>访问授权服务器<code>请求授权</code>：<code>http://localhost:8081/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://www.baidu.com</code></li><li>授权服务器将浏览器<code>重定向</code>到登录页面：<code>http://localhost:8081/login</code></li><li>用户输入用户名和密码，登录成功，允许访问受保护资源后，重定向到：<code>https://www.baidu.com/?code=etlPQm</code>，其中的<code>code</code>即授权码，后台可以根据这个授权码去换取<code>access_token</code>：<code>http://localhost:8000/api/oauth/token</code>，其中<code>/api/auth</code>代表通过网关路由到<code>consul-auth</code>服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTTP Method: POST  </span><br><span class="line">http://localhost:8000/api/oauth/token</span><br><span class="line">Authorization: Basic &#123;BASE64-ENCODED client:secret&#125;  </span><br><span class="line">Accept: application/json  </span><br><span class="line">Request:  </span><br><span class="line">    &#123;</span><br><span class="line">      &quot;grant_type&quot; : &quot;authorization_code&quot;,</span><br><span class="line">      &quot;code&quot; : &quot;9Vzv9t&quot;,</span><br><span class="line">      &quot;redirect_uri&quot; : &quot;http://www.baidu.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><img src="/images/微服务架构下的安全设计方案/Authorization code.png" alt="image"></p><p>　　其中的<code>Authorization</code>请求头为<code>Basic</code> + <code>client:secret</code>的<code>Base64</code>编码，编码后的值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Basic Y2xpZW50OnNlY3JldA==</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ol start="4"><li>获取到<code>access_token</code>之后就可以带上token访问授保护资源了</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTTP Method: POST  </span><br><span class="line">localhost:8000/api/provider/sayHello?name=student</span><br><span class="line">Authorization: Basic &#123;BASE64-ENCODED client:secret&#125;  </span><br><span class="line">Accept: application/json  </span><br><span class="line">Request:  </span><br><span class="line">    &#123;</span><br><span class="line">      &quot;grant_type&quot; : &quot;authorization_code&quot;,</span><br><span class="line">      &quot;code&quot; : &quot;9Vzv9t&quot;,</span><br><span class="line">      &quot;redirect_uri&quot; : &quot;http://www.baidu.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">Response:  </span><br><span class="line">    hello, student</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><strong>授权码是一次有效，用完之后就不能再次使用了</strong></p><h4 id="5-2-3-password模式"><a href="#5-2-3-password模式" class="headerlink" title="5.2.3 password模式"></a>5.2.3 password模式</h4><p>　　客户端使用<code>password</code>授权方式，调用<code>/api/auth/oauth/token</code>接口获取<code>access_token</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTTP Method: POST  </span><br><span class="line">http://localhost:8000/api/auth/oauth/token</span><br><span class="line">Authorization: Basic &#123;BASE64-ENCODED client:secret&#125; </span><br><span class="line">Accept: application/json  </span><br><span class="line">Request:  </span><br><span class="line">    &#123;</span><br><span class="line">      &quot;grant_type&quot; : &quot;password&quot;,</span><br><span class="line">      &quot;scope&quot; : &quot;read&quot;,</span><br><span class="line">      &quot;username&quot; : &quot;admin&quot;,</span><br><span class="line">      &quot;password&quot; : &quot;11&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">Response:  </span><br><span class="line">    &#123;</span><br><span class="line">      &quot;access_token&quot;: &quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,</span><br><span class="line">      &quot;token_type&quot;: &quot;bearer&quot;,</span><br><span class="line">      &quot;refresh_token&quot;: &quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9....&quot;,</span><br><span class="line">      &quot;expires_in&quot;: 3599,</span><br><span class="line">      &quot;scope&quot;: &quot;read&quot;,</span><br><span class="line">      &quot;jti&quot;: &quot;ef48fc8f-40c5-4eff-b224-347ab2cfa223&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><img src="/images/微服务架构下的安全设计方案/password.png" alt="image"></p><p>　　表单中包含了字段<code>password</code>（认证类型）和字段<code>scope</code>（认证范围），请求头包含<code>Authorization</code>授权，类型为<code>Basic</code></p><p>　　发出认证请求的返回结果，<code>access_token</code>为有效认证<code>token</code>，将来被其他请求使用</p><p>　　获取<code>access_token</code>后，携带在<code>Authorization</code>请求头，格式为：<code>Bearer + access_token</code>，请求受保护的资源url：<code>/api/user/sayHello?name=student</code></p><p><img src="/images/微服务架构下的安全设计方案/sayHello.png" alt="image"></p><p><img src="/images/微服务架构下的安全设计方案/resource service config.png" alt="image"></p><p>　　业务组件鉴权（如<code>@PreAuthorize</code>）：</p><p><img src="/images/微服务架构下的安全设计方案/test.png" alt="image"></p><h4 id="5-2-4-简化模式"><a href="#5-2-4-简化模式" class="headerlink" title="5.2.4 简化模式"></a>5.2.4 简化模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTTP Method: GET  </span><br><span class="line">http://localhost:8081/oauth/authorize?client_id=client&amp;response_type=token&amp;redirect_uri=http://www.baidu.com</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>　　其中<code>response_type=token</code></p><p>　　授权结束后，重定向到百度的url会携带<code>access_token</code>：<code>https://www.baidu.com/#access_token=eyJhbGciOiJSUzI1NiIsInR...</code></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>　　总的来说，微服务架构下，<code>分布式Session</code>、<code>Spring Cloud Security</code>都可以作为安全设计的方案，分布式Session虽然可以解决，但实现起来相对复杂，终究不是上策。<code>Spring Cloud Security</code>很好的结合了<code>Oauth2.0</code>、<code>JWT</code>，加上简单易用，能有效地提高后端服务的可用性和扩展性，能很好的满足微服务架构的安全需求。　　　　</p><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7 参考资料"></a>7 参考资料</h2><ul><li><a href="https://gitee.com/wells2333/spring-cloud-learn-consul.git" target="_blank" rel="noopener">示例代码</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth2.0</a></li><li><a href="https://http://wwwbuild.net/greatops/414179.htmlhttp://wwwbuild.net/greatops/414179.html" target="_blank" rel="noopener">如何做一个优秀的微服务访问安全设计方案？</a></li><li><a href="https://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs" target="_blank" rel="noopener">JSON Web Token Tutorial: An Example in Laravel and AngularJS</a></li><li><a href="https://dzone.com/articles/microservices-in-practice-1" target="_blank" rel="noopener">Microservices in Practice: From Architecture to Deployment</a></li><li><a href="http://stytex.de/blog/2016/02/01/spring-cloud-security-with-oauth2/" target="_blank" rel="noopener">Securing Spring Cloud Microservices With OAuth2</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　主要探讨一下在微服务架构下的一下安全设计方面的内容，包括JWT、OAuth2.0以及如何使用Spring Cloud Security实现保护服务接口、服务间的鉴权等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring cloud" scheme="http://ehedgehog.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>使用vultr搭建自己的vpn</title>
    <link href="http://ehedgehog.com/2019/01/19/%E4%BD%BF%E7%94%A8vultr%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84vpn/"/>
    <id>http://ehedgehog.com/2019/01/19/%E4%BD%BF%E7%94%A8vultr%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84vpn/</id>
    <published>2019-01-19T05:25:20.000Z</published>
    <updated>2019-07-14T05:33:17.777Z</updated>
    
    <content type="html"><![CDATA[<p>手摸手教你在vps搭建属于自己的vpn教程，开始科学上网（利用vultr，Google, 看youtube1080p无压力）</p><a id="more"></a><p>步骤大致是到<a href="https://www.vultr.com/" target="_blank" rel="noopener">vultr</a>注册一个账号，部署一台vps，在vps上安装shadowsocksR，下载<a href="https://github.com/shadowsocks/shadowsocks-windows/releases/" target="_blank" rel="noopener">ssr客户端</a>使用</p><h3 id="一、部署服务器"><a href="#一、部署服务器" class="headerlink" title="一、部署服务器"></a>一、部署服务器</h3><p>注册<a href="https://www.vultr.com/" target="_blank" rel="noopener">vultr</a>账号，新增一台server，serverLocation随意，我选的是Atlanta，serverType选CentOS 6x64，ServerSize选3.5美刀，因为2.5美刀不支持ipv4，其它默认</p><p><img src="/images/使用vultr搭建自己的vpn/serverLocation.png" alt="image"></p><p><img src="/images/使用vultr搭建自己的vpn/serverType.png" alt="image"></p><p><img src="/images/使用vultr搭建自己的vpn/deploy.png" alt="image"></p><h3 id="二、安装shadowsocksR"><a href="#二、安装shadowsocksR" class="headerlink" title="二、安装shadowsocksR"></a>二、安装shadowsocksR</h3><p>部署成功后，服务器的IP、账号和密码：</p><p><img src="/images/使用vultr搭建自己的vpn/manager.png" alt="image"></p><p>打开Xshell，用上面的root账号登录服务器，依次执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh </span><br><span class="line"></span><br><span class="line">chmod +x shadowsocksR.sh </span><br><span class="line"></span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后输入访问的密码、端口，其他默认</p><p>这时会出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Congratulations, ShadowsocksR server install completed!</span><br><span class="line">Your Server IP :your_server_ip</span><br><span class="line">Your Server Port :your_server_port</span><br><span class="line">Your Password :your_password</span><br><span class="line">Your Protocol :your_protocol</span><br><span class="line">Your obfs :your_obfs</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://shadowsocks.be/9.html</span><br><span class="line">Enjoy it!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/使用vultr搭建自己的vpn/congratulations.png" alt="image"></p><p>安装完成后即已后台启动 ShadowsocksR，可以下载<a href="https://github.com/shadowsocks/shadowsocks-windows/releases/" target="_blank" rel="noopener">ssr客户端</a>，填入服务器的IP端口科学上网了</p><h3 id="三、安装bbr加速"><a href="#三、安装bbr加速" class="headerlink" title="三、安装bbr加速"></a>三、安装bbr加速</h3><p>这时可能会出现网络慢的情况，可以安装bbr加速，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PS：文章仅供参考和交流，如使用在商业行为上，则使用者对任何自主决定的行为负责！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手摸手教你在vps搭建属于自己的vpn教程，开始科学上网（利用vultr，Google, 看youtube1080p无压力）&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://ehedgehog.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube代码质量管理平台安装和分析maven项目</title>
    <link href="http://ehedgehog.com/2019/01/13/SonarQube%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%86%E6%9E%90maven%E9%A1%B9%E7%9B%AE/"/>
    <id>http://ehedgehog.com/2019/01/13/SonarQube%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%86%E6%9E%90maven%E9%A1%B9%E7%9B%AE/</id>
    <published>2019-01-13T04:05:56.000Z</published>
    <updated>2019-07-14T05:33:17.776Z</updated>
    
    <content type="html"><![CDATA[<p>Sonarqube是一个开源的代码质量管理平台，可以扫描代码中的明显错误和潜在bug，本次使用sonarqube7.5扫描新版在线考试系统<a href="https://gitee.com/wells2333/online-exam.git" target="_blank" rel="noopener">online-exam</a>的代码</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>jdk1.8<br>MySQL5.7 （&gt;=5.6 &amp;&amp; &lt; 8.0）<br>sonarqube：7.5<br>sonar-scanner：3.3.0.1492</p><h2 id="安装sonarqube："><a href="#安装sonarqube：" class="headerlink" title="安装sonarqube："></a>安装sonarqube：</h2><p>下载地址：<a href="https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.5.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.5.zip</a></p><ol><li>下载sonarqube-7.5.zip后，解压打开bin目录，打开对应系统的StartSonar，如windows64位的是bin\windows-x86-64\StartSonar.bat</li><li>浏览器访问：<a href="http://localhost:9000，能访问说明安装成功" target="_blank" rel="noopener">http://localhost:9000，能访问说明安装成功</a></li></ol><p>配置：</p><ol><li>新建一个名为sonar的数据库</li><li>打开sonarqube-7.5\conf\sonar.properties</li><li>配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false</span><br><span class="line">sonar.jdbc.username=root</span><br><span class="line">sonar.jdbc.password=</span><br><span class="line">sonar.sorceEncoding=UTF-8</span><br><span class="line">sonar.login=admin</span><br><span class="line">sonar.password=admin</span><br></pre></td></tr></table></figure><ol start="4"><li>重启sonar，再次访问<a href="http://localhost:9000，会稍微有点慢，因为要初始化数据库信息" target="_blank" rel="noopener">http://localhost:9000，会稍微有点慢，因为要初始化数据库信息</a></li><li>汉化：在安装插件plugin的界面搜索chinese，并安装，重启即可。</li></ol><h2 id="安装sonar-scanner"><a href="#安装sonar-scanner" class="headerlink" title="安装sonar-scanner"></a>安装sonar-scanner</h2><p>下载地址：<a href="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-windows.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-windows.zip</a></p><ol><li>下载完成后，解压，修改\sonar-scanner-3.3.0.1492-windows\conf\sonar-scanner.properties</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/qjfsonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</span><br><span class="line">sonar.jdbc.username=root</span><br><span class="line">sonar.jdbc.password=</span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置环境变量</p><p> 新建系统环境变量：SONAR_RUNNER_HOME，值：C:\software\sonarqube\sonar-scanner\sonar-scanner-3.3.0.1492-windows</p><p> path变量添加：%SONAR_RUNNER_HOME%\bin</p></li><li><p>验证</p><p> 打开命令窗口，输入sonar-scanner -v</p><p> 若输出sonar-scanner版本号则配置成功</p></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>本次分析的是<a href="https://gitee.com/wells2333/online-exam.git" target="_blank" rel="noopener">online-exam</a>，是maven项目，需要配置maven的setting文件和项目的pom</p><ol><li>首先在项目的根目录新建sonar-project.properties</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sonar.projectKey=online-exam</span><br><span class="line">sonar.projectName=online-exam</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line">sonar.sources=</span><br><span class="line">sonar.binaries=bin</span><br><span class="line">sonar.language=java</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure><ol start="2"><li>配置maven的setting文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;pluginGroups&gt;</span><br><span class="line">        &lt;pluginGroup&gt;org.sonarsource.scanner.maven&lt;/pluginGroup&gt;</span><br><span class="line">    &lt;/pluginGroups&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;sonar&lt;/id&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">            &lt;/activation&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;!-- 配置 Sonar Host地址 --&gt;</span><br><span class="line">                &lt;sonar.host.url&gt;</span><br><span class="line">                  http://localhost:9000</span><br><span class="line">                &lt;/sonar.host.url&gt;</span><br><span class="line">            &lt;/properties&gt;</span><br><span class="line">        &lt;/profile&gt;</span><br><span class="line">     &lt;/profiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改项目的pom</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.3.0.603&lt;/version&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li>在项目根目录执行命令，开始分析</li></ol><p>mvn clean install org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar</p><ol start="2"><li>登录sonar查看分析结果</li></ol><p><img src="/images/SonarQube代码质量管理平台安装和分析maven项目/sonar.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sonarqube是一个开源的代码质量管理平台，可以扫描代码中的明显错误和潜在bug，本次使用sonarqube7.5扫描新版在线考试系统&lt;a href=&quot;https://gitee.com/wells2333/online-exam.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;online-exam&lt;/a&gt;的代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="SonarQube" scheme="http://ehedgehog.com/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>微服务下的权限控制</title>
    <link href="http://ehedgehog.com/2018/11/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://ehedgehog.com/2018/11/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</id>
    <published>2018-11-03T13:41:43.000Z</published>
    <updated>2019-07-14T05:33:17.779Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Spring Cloud下的微服务的权限控制，主要分为两块：用户认证、用户权限</p><a id="more"></a><h3 id="一、用户认证"><a href="#一、用户认证" class="headerlink" title="一、用户认证"></a>一、用户认证</h3><pre><code>原理：OAuth2.0+JWT</code></pre><h4 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h4><p>一种授权框架</p><p>OAuth2.0包含四个角色：</p><ul><li>资源拥有者(Resource Owner)</li><li>资源服务器(Resource Server)</li><li>授权服务器(Authorization Server)</li><li>客户端(Client)</li></ul><p>OAuth2.0包含四种授权模式：</p><ul><li>授权码（认证码）模式 （Authorization code)</li><li>简化（隐形）模式 (Impilict</li><li>用户名密码模式 (Resource Owner Password Credential)</li><li>客户端模式 (Client Credential)</li></ul><p>缺点：所有访问微服务资源的请求都在Http Header中携带Token，被访问的服务再去请求授权服务器验证Token的有效性，所有的Token有效性校验都落在的授权服务器上，授权服务器存在瓶颈，这时候就需要引入JWT了。</p><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><p>一种认证协议</p><p>授权服务器将用户信息和授权范围序列化后放入一个JSON字符串，然后使用Base64进行编码，最终在授权服务器用私钥对这个字符串进行签名，得到一个JSON Web Token。</p><p>假设其他所有的资源服务器都将持有一个RSA公钥，资源服务器从Http Header中拿到Token，并验证它是否使用正确的私钥签名（也就是验签）。验签通过，反序列化后就拿到Toekn中包含的有效验证信息，这样就可以很好地完成服务化后的用户认证。</p><h3 id="二、用户权限"><a href="#二、用户权限" class="headerlink" title="二、用户权限"></a>二、用户权限</h3><p>基础概念：RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。</p><p>把服务的所有api接口都定义为资源，资源拥有资源编码和资源URI。</p><p>在前端只需要检验该资源编码的有无就可以控制按钮的显示和隐藏，而在后端我们只需要统一拦截判断当前用户是否具有URI和对应请求方式即可。</p><p>权限的统一拦截是放置在Zuul这个网关上实现。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>Spring Cloud Security就结合了OAuth2.0，引入JWT优化token校验</p><p>实例地址：<a href="https://gitee.com/wells2333/online-exam.git" target="_blank" rel="noopener">online-exam</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Spring Cloud下的微服务的权限控制，主要分为两块：用户认证、用户权限&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring cloud" scheme="http://ehedgehog.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper的典型应用场景</title>
    <link href="http://ehedgehog.com/2018/10/17/zookeeper%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://ehedgehog.com/2018/10/17/zookeeper%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2018-10-17T13:59:15.000Z</published>
    <updated>2019-07-14T05:33:17.777Z</updated>
    
    <content type="html"><![CDATA[<p>《从Paxos到zookeeper分布式一致性原理与实践》之–zookeeper的典型应用场景</p><p>zookeeper的典型应用场景有：数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁、分布式队列</p><a id="more"></a><h3 id="一、数据发布-订阅"><a href="#一、数据发布-订阅" class="headerlink" title="一、数据发布/订阅"></a>一、数据发布/订阅</h3><p>数据的发布、订阅即所谓的配置中心，将数据发布到zookeeper一个或一系列节点上，供订阅者订阅，达到动态获取数据的目的</p><p>发布、订阅有两种设计，分别是推模式和拉模式</p><p>推模式：服务端主动发送更新数据到订阅的客户端</p><p>拉模式：客户端主动发起请求来获取最新的数据，通常是定时轮询</p><p>zookeeper采用推拉结合的方式：客户端向服务端注册需要关注的节点，当节点数据变化时，服务端发送watcher事件，客户端收到消息后再主动获取最新的数据</p><p>全局配置信息的特性：</p><ul><li>数据量小</li><li>数据运行时动态变化</li><li>集群中各机器共享，配置一致</li></ul><p>例子：数据配置</p><p>用一个节点存放数据库配置信息，每台机器启动时获取配置信息，并注册watcher，当数据变化时客户端再获取数据</p><h3 id="二、负载均衡"><a href="#二、负载均衡" class="headerlink" title="二、负载均衡"></a>二、负载均衡</h3><p>定义：对计算机、网络连接、CPU、磁盘驱动或其他资源进行分配负载，以达到优化资源利用、最大化吞吐率、最小化响应时间和避免过载的目的</p><p>通常分为硬件和软件负载均衡两类</p><p>一种动态的DNS服务 DNS是域名系统的缩写（Domain Name System） 可以看做是超大规模的分布式映射表，用于将域名和IP进行一一映射，方便通过域名访问互联网站点</p><h3 id="三、命名服务"><a href="#三、命名服务" class="headerlink" title="三、命名服务"></a>三、命名服务</h3><p>通过使用命名服务，客户端应用能够根据指定的名字获取资源实体、服务地址和提供者信息等</p><p>JNDI就是一种典型的命名服务，JNDI是java命名与目录接口的缩写（java Naming and Directory Interface）</p><p>全局唯一id，最易想到uuid，uuid是通用唯一识别码的缩写（universally Unique Identifier），最典型的实现就是GUID（Globally Unique Identifier，全局唯一标识符）</p><p>一个标准的UUid包含32位字符和4个短线的字符串</p><p>uuid的缺点：</p><ul><li>长度过长，意味着需要更多空间存储</li><li>含义不明，字面上看不出任何其表达的含义，影响调试效率</li><li>利用zookeeper API接口可以创建顺序节点，并返回节点的完整名字的特性，可以生成全局唯一id</li></ul><h3 id="四、分布式协调-通知"><a href="#四、分布式协调-通知" class="headerlink" title="四、分布式协调/通知"></a>四、分布式协调/通知</h3><p>通过注册watcher，监听节点数据变化实现</p><h3 id="五、集群管理"><a href="#五、集群管理" class="headerlink" title="五、集群管理"></a>五、集群管理</h3><p>集群管理包括集群监控和集群控制</p><p>分布式日志收集系统</p><p>在线云主机管理</p><h3 id="六、Master选举"><a href="#六、Master选举" class="headerlink" title="六、Master选举"></a>六、Master选举</h3><p>在分布式式系统中，master用来协调集群中的其它系统单元，具有对分布式系统状态变更的决定权</p><p>广告投放系统后台</p><h3 id="七、分布式锁"><a href="#七、分布式锁" class="headerlink" title="七、分布式锁"></a>七、分布式锁</h3><p>以前可以依赖关系型数据库固有的排他性实现不同的进程互斥，如行锁、表锁</p><h4 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h4><p>又称为写锁和独占锁，在加锁期间，其它事务不能对这个数据对象进行任何其它类型的操作</p><p>定义锁，java中是synchronized机制和ReentrantLock，zookeeper使用节点代表一个锁</p><p>获取锁，调用create接口，创建临时节点，最终只有一个客户端创建成功，就认为该客户端获取了锁，没获取锁的客户端注册watcher监听</p><p>释放锁，获取到锁的客户端宕机或客户端主动删除临时节点都会释放锁</p><h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><p>又称为读锁，若给数据加了共享锁，当前事务只能对数据进行读操作，其它事务也只能对数据进行加共享锁，直到该数据的所有共享锁被释放</p><p>定义锁，同样创建临时节点代表锁，但应该是临时顺序的节点</p><p>获取锁，直接在锁下创建临时顺序节点，如果是读请求，加读的标志，写请求则加写标志</p><p>判断读写顺序</p><pre><code>1. 创建完节点后，获取锁下的所有子节点，并对该节点注册子节点变更的watcher监听2. 确定自己的节点序号在所有子节点中的顺序3. 对于读请求：    如果没有比自己序号小的节点，或是所有比自己序号小的子节点都是读请求，那么表明自己已经成功获取到共享锁，开始执行读逻辑    对于写请求：如果自己不是最小的子节点，进入等待4. 接收到watcher通知后，重复步骤1</code></pre><p>释放锁，与排他锁一致</p><h4 id="羊群效应"><a href="#羊群效应" class="headerlink" title="羊群效应"></a>羊群效应</h4><p>集群规模较大时，服务端会产生大量的watcher通知，改进后的分布式锁实现</p><pre><code>1. 客户端create临时顺序节点2. 客户端调用getChildren获取已创建的子节点列表，但不注册watcher3. 如无法获取共享锁，那么调用exist对比自己小的那个节点注册watcher    读请求：向比自己序号小的最后一个写请求节点注册watcher    写请求：向比自己序号小的最后一个节点注册watcher4. 等待watcher，继续进入步骤2</code></pre><h3 id="八、分布式队列"><a href="#八、分布式队列" class="headerlink" title="八、分布式队列"></a>八、分布式队列</h3><p>FIFO：先进先出</p><p>getChildren获取队列的所有节点</p><p>确定自己的节点序号在所有子节点的顺序</p><p>如果不是序号最小，进入等待，同时向比自己序号小的最后一个节点注册watcher</p><p>接收watcher通知，重复步骤1</p><p>Barrier：分布式屏障</p><p>应用于大规模并行计算：最终的合并计算需要基于多个并行计算的子结果来进行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《从Paxos到zookeeper分布式一致性原理与实践》之–zookeeper的典型应用场景&lt;/p&gt;
&lt;p&gt;zookeeper的典型应用场景有：数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁、分布式队列&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://ehedgehog.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>多线程切割文件</title>
    <link href="http://ehedgehog.com/2018/09/24/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/"/>
    <id>http://ehedgehog.com/2018/09/24/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/</id>
    <published>2018-09-23T16:00:00.000Z</published>
    <updated>2019-07-14T05:33:17.778Z</updated>
    
    <content type="html"><![CDATA[<p>应用场景：上传大文件到云存储（如华为云），需要应用系统按云存储指定的格式将文件切割后再分多次上传。</p><p>原理：RandomAccessFile+多线程。</p><a id="more"></a><h4 id="一、切割文件线程"><a href="#一、切割文件线程" class="headerlink" title="一、切割文件线程"></a>一、切割文件线程</h4><figure class="highlight java"><figcaption><span>SplitCallable.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SplitCallable.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分块大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> byteSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 块文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String partFileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 源文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> File sourceFile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startPos;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SplitCallable</span><span class="params">(<span class="keyword">int</span> byteSize, <span class="keyword">int</span> startPos, String partFileName, File sourceFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startPos = startPos;</span><br><span class="line">        <span class="keyword">this</span>.byteSize = byteSize;</span><br><span class="line">        <span class="keyword">this</span>.partFileName = partFileName;</span><br><span class="line">        <span class="keyword">this</span>.sourceFile = sourceFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RandomAccessFile randomAccessFile = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        String filePath = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            randomAccessFile = <span class="keyword">new</span> RandomAccessFile(sourceFile, <span class="string">"r"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[byteSize];</span><br><span class="line">            <span class="comment">// 移动指针到指定位置</span></span><br><span class="line">            randomAccessFile.seek(startPos);</span><br><span class="line">            <span class="keyword">int</span> s = randomAccessFile.read(bytes);</span><br><span class="line">            <span class="comment">// 在同级目录输出</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(sourceFile.getParent(), partFileName);</span><br><span class="line">            filePath = file.getPath();</span><br><span class="line">            outputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, s);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(outputStream);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filePath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、调用过程"><a href="#二、调用过程" class="headerlink" title="二、调用过程"></a>二、调用过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ExecutorService service = Executors.newFixedThreadPool(corePoolSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源文件</span></span><br><span class="line">File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line"><span class="comment">// 需要切割的块的个数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 开始位置</span></span><br><span class="line"><span class="keyword">int</span> startPos = <span class="number">0</span>;</span><br><span class="line">List&lt;Future&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="comment">// 需要切割的大小</span></span><br><span class="line">    <span class="keyword">int</span> byteSize = getByteSize();</span><br><span class="line">    <span class="comment">// 切割文件</span></span><br><span class="line">    Future&lt;String&gt; future = service.submit(<span class="keyword">new</span> SplitCallable(byteSize, startPos, i + <span class="string">".tmp"</span>, file));</span><br><span class="line">    futures.add(future);</span><br><span class="line">    <span class="comment">// 更新偏移量</span></span><br><span class="line">    startPos += byteSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步获取切割结果</span></span><br><span class="line"><span class="keyword">for</span> (Future future : futures) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">"切割后的文件路径：&#123;&#125;"</span>, future.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、测试结果"><a href="#三、测试结果" class="headerlink" title="三、测试结果"></a>三、测试结果</h4><p>将1.5G的文件切割成20块，耗时7秒</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用场景：上传大文件到云存储（如华为云），需要应用系统按云存储指定的格式将文件切割后再分多次上传。&lt;/p&gt;
&lt;p&gt;原理：RandomAccessFile+多线程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://ehedgehog.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>xxl-job源码研究之--路由算法及实现</title>
    <link href="http://ehedgehog.com/2018/08/19/xxl-job%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B--%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://ehedgehog.com/2018/08/19/xxl-job%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B--%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/</id>
    <published>2018-08-18T16:00:00.000Z</published>
    <updated>2019-07-14T05:33:17.777Z</updated>
    
    <content type="html"><![CDATA[<p>xxl-job是一个轻量级分布式任务调度平台，任务在调度中心触发，由调度中心分发任务到具体的执行器中执行。在执行器集群环境下，调度中心会根据任务配置的路由策略选择具体的执行器执行任务，涉及的路由策略有：第一个、最后一个、轮询、随机、一致性哈希、最不经常使用、最近最久未使用等。<br>可以从路由策略延伸到常用的分布式服务框架（如dubbo）的负载均衡算法实现。</p><a id="more"></a><h4 id="一、第一个"><a href="#一、第一个" class="headerlink" title="一、第一个"></a>一、第一个</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">route</span><span class="params">(<span class="keyword">int</span> jobId, ArrayList&lt;String&gt; addressList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addressList.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、最后一个"><a href="#二、最后一个" class="headerlink" title="二、最后一个"></a>二、最后一个</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">route</span><span class="params">(<span class="keyword">int</span> jobId, ArrayList&lt;String&gt; addressList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addressList.get(addressList.size()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、轮询"><a href="#三、轮询" class="headerlink" title="三、轮询"></a>三、轮询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;Integer, Integer&gt; routeCountEachJob = <span class="keyword">new</span> ConcurrentHashMap&lt;Integer, Integer&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> CACHE_VALID_TIME = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> jobId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cache clear</span></span><br><span class="line">    <span class="keyword">if</span> (System.currentTimeMillis() &gt; CACHE_VALID_TIME) &#123;</span><br><span class="line">        routeCountEachJob.clear();</span><br><span class="line">        CACHE_VALID_TIME = System.currentTimeMillis() + <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// count++</span></span><br><span class="line">    Integer count = routeCountEachJob.get(jobId);</span><br><span class="line">    count = (count==<span class="keyword">null</span> || count&gt;<span class="number">1000000</span>)?(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>)):++count;  <span class="comment">// 初始化时主动Random一次，缓解首次压力</span></span><br><span class="line">    routeCountEachJob.put(jobId, count);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">route</span><span class="params">(<span class="keyword">int</span> jobId, ArrayList&lt;String&gt; addressList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addressList.get(count(jobId)%addressList.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、随机"><a href="#四、随机" class="headerlink" title="四、随机"></a>四、随机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Random localRandom = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">route</span><span class="params">(<span class="keyword">int</span> jobId, ArrayList&lt;String&gt; addressList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Collections.shuffle(addressList);</span></span><br><span class="line">    <span class="keyword">return</span> addressList.get(localRandom.nextInt(addressList.size()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、一致性哈希"><a href="#五、一致性哈希" class="headerlink" title="五、一致性哈希"></a>五、一致性哈希</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> VIRTUAL_NODE_NUM = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get hash code on 2^32 ring (md5散列的方式计算hash值)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// md5 byte</span></span><br><span class="line">    MessageDigest md5;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"MD5 not supported"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    md5.reset();</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        keyBytes = key.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unknown string :"</span> + key, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    md5.update(keyBytes);</span><br><span class="line">    <span class="keyword">byte</span>[] digest = md5.digest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hash code, Truncate to 32-bits</span></span><br><span class="line">    <span class="keyword">long</span> hashCode = ((<span class="keyword">long</span>) (digest[<span class="number">3</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>)</span><br><span class="line">            | ((<span class="keyword">long</span>) (digest[<span class="number">2</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">            | ((<span class="keyword">long</span>) (digest[<span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">            | (digest[<span class="number">0</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> truncateHashCode = hashCode &amp; <span class="number">0xffffffffL</span>;</span><br><span class="line">    <span class="keyword">return</span> truncateHashCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">route</span><span class="params">(<span class="keyword">int</span> jobId, ArrayList&lt;String&gt; addressList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------A1------A2-------A3------</span></span><br><span class="line">    <span class="comment">// -----------J1------------------</span></span><br><span class="line">    TreeMap&lt;Long, String&gt; addressRing = <span class="keyword">new</span> TreeMap&lt;Long, String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String address: addressList) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VIRTUAL_NODE_NUM; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> addressHash = hash(<span class="string">"SHARD-"</span> + address + <span class="string">"-NODE-"</span> + i);</span><br><span class="line">            addressRing.put(addressHash, address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> jobHash = hash(String.valueOf(jobId));</span><br><span class="line">    SortedMap&lt;Long, String&gt; lastRing = addressRing.tailMap(jobHash);</span><br><span class="line">    <span class="keyword">if</span> (!lastRing.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> lastRing.get(lastRing.firstKey());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addressRing.firstEntry().getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六、最不经常使用"><a href="#六、最不经常使用" class="headerlink" title="六、最不经常使用"></a>六、最不经常使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;Integer, HashMap&lt;String, Integer&gt;&gt; jobLfuMap = <span class="keyword">new</span> ConcurrentHashMap&lt;Integer, HashMap&lt;String, Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> CACHE_VALID_TIME = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">route</span><span class="params">(<span class="keyword">int</span> jobId, ArrayList&lt;String&gt; addressList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cache clear</span></span><br><span class="line">    <span class="keyword">if</span> (System.currentTimeMillis() &gt; CACHE_VALID_TIME) &#123;</span><br><span class="line">        jobLfuMap.clear();</span><br><span class="line">        CACHE_VALID_TIME = System.currentTimeMillis() + <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lfu item init</span></span><br><span class="line">    HashMap&lt;String, Integer&gt; lfuItemMap = jobLfuMap.get(jobId);     <span class="comment">// Key排序可以用TreeMap+构造入参Compare；Value排序暂时只能通过ArrayList；</span></span><br><span class="line">    <span class="keyword">if</span> (lfuItemMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">        lfuItemMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        jobLfuMap.put(jobId, lfuItemMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String address: addressList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!lfuItemMap.containsKey(address) || lfuItemMap.get(address) &gt;<span class="number">1000000</span> ) &#123;</span><br><span class="line">            lfuItemMap.put(address, <span class="keyword">new</span> Random().nextInt(addressList.size()));  <span class="comment">// 初始化时主动Random一次，缓解首次压力</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load least userd count address</span></span><br><span class="line">    List&lt;Map.Entry&lt;String, Integer&gt;&gt; lfuItemList = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String, Integer&gt;&gt;(lfuItemMap.entrySet());</span><br><span class="line">    Collections.sort(lfuItemList, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.getValue().compareTo(o2.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Map.Entry&lt;String, Integer&gt; addressItem = lfuItemList.get(<span class="number">0</span>);</span><br><span class="line">    String minAddress = addressItem.getKey();</span><br><span class="line">    addressItem.setValue(addressItem.getValue() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> addressItem.getKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七、最近最久未使用"><a href="#七、最近最久未使用" class="headerlink" title="七、最近最久未使用"></a>七、最近最久未使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;Integer, LinkedHashMap&lt;String, String&gt;&gt; jobLRUMap = <span class="keyword">new</span> ConcurrentHashMap&lt;Integer, LinkedHashMap&lt;String, String&gt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> CACHE_VALID_TIME = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">route</span><span class="params">(<span class="keyword">int</span> jobId, ArrayList&lt;String&gt; addressList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cache clear</span></span><br><span class="line">    <span class="keyword">if</span> (System.currentTimeMillis() &gt; CACHE_VALID_TIME) &#123;</span><br><span class="line">        jobLRUMap.clear();</span><br><span class="line">        CACHE_VALID_TIME = System.currentTimeMillis() + <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init lru</span></span><br><span class="line">    LinkedHashMap&lt;String, String&gt; lruItem = jobLRUMap.get(jobId);</span><br><span class="line">    <span class="keyword">if</span> (lruItem == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * LinkedHashMap</span></span><br><span class="line"><span class="comment">         *      a、accessOrder：ture=访问顺序排序（get/put时排序）；false=插入顺序排期；</span></span><br><span class="line"><span class="comment">         *      b、removeEldestEntry：新增元素时将会调用，返回true时会删除最老元素；可封装LinkedHashMap并重写该方法，比如定义最大容量，超出是返回true即可实现固定长度的LRU算法；</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        lruItem = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">16</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        jobLRUMap.put(jobId, lruItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put</span></span><br><span class="line">    <span class="keyword">for</span> (String address: addressList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!lruItem.containsKey(address)) &#123;</span><br><span class="line">            lruItem.put(address, address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load</span></span><br><span class="line">    String eldestKey = lruItem.entrySet().iterator().next().getKey();</span><br><span class="line">    String eldestValue = lruItem.get(eldestKey);</span><br><span class="line">    <span class="keyword">return</span> eldestValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xxl-job是一个轻量级分布式任务调度平台，任务在调度中心触发，由调度中心分发任务到具体的执行器中执行。在执行器集群环境下，调度中心会根据任务配置的路由策略选择具体的执行器执行任务，涉及的路由策略有：第一个、最后一个、轮询、随机、一致性哈希、最不经常使用、最近最久未使用等。&lt;br&gt;可以从路由策略延伸到常用的分布式服务框架（如dubbo）的负载均衡算法实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="任务调度" scheme="http://ehedgehog.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>java里实现Word转PDF的几种方案</title>
    <link href="http://ehedgehog.com/2018/07/24/java%E9%87%8CWord%E8%BD%ACpdf%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://ehedgehog.com/2018/07/24/java%E9%87%8CWord%E8%BD%ACpdf%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/</id>
    <published>2018-07-23T16:00:00.000Z</published>
    <updated>2019-07-14T05:33:17.777Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Java里实现Word转PDF的几种方案，分别是libreoffice、docx4j、documents4j、jacob、pageOffice。</p><a id="more"></a><h3 id="一、libreOffice"><a href="#一、libreOffice" class="headerlink" title="一、libreOffice"></a>一、libreOffice</h3><p>与openOffice类似，但比openOffice稳定。</p><p>优点：样式稳定</p><p>缺点：性能较差</p><h4 id="调用方式："><a href="#调用方式：" class="headerlink" title="调用方式："></a>调用方式：</h4><ol><li>windows：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">docToPdf</span><span class="params">(String docPath)</span> </span>&#123;</span><br><span class="line">        String libreOfficePath = Global.getConfig(<span class="string">"libreOffice"</span>);</span><br><span class="line">        <span class="comment">// 自动补全路径</span></span><br><span class="line">        <span class="keyword">if</span> (!libreOfficePath.endsWith(File.separator))</span><br><span class="line">            libreOfficePath += File.separator;</span><br><span class="line">        <span class="comment">//soffice --convert-to pdf  -outdir E:/test.docx</span></span><br><span class="line">        String command = libreOfficePath + <span class="string">"soffice --convert-to pdf  -outdir "</span> + <span class="keyword">new</span> File(docPath).getParent() + <span class="string">" "</span> + docPath;</span><br><span class="line">        <span class="comment">// 执行转换</span></span><br><span class="line">        String result = commandExecutor.executeCommand(command, EXECUTE_COMMAND_TIME_OUT).getExecuteOut();</span><br><span class="line">        logger.info(result);</span><br><span class="line">        docPath = docPath.replace(<span class="string">".docx"</span>, <span class="string">".pdf"</span>);</span><br><span class="line">        <span class="keyword">return</span> docPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>linux:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">docToPdf</span><span class="params">(String docPath)</span> </span>&#123;</span><br><span class="line">        String libreOfficePath = Global.getConfig(<span class="string">"libreOffice"</span>);</span><br><span class="line">        String command = libreOfficePath + <span class="string">" --invisible --convert-to pdf:writer_pdf_Export --outdir "</span></span><br><span class="line">                + <span class="keyword">new</span> File(docPath).getParent() + <span class="string">" "</span> + docPath;</span><br><span class="line">        <span class="comment">// 执行转换</span></span><br><span class="line">        String result = commandExecutor.executeCommand(command, EXECUTE_COMMAND_TIME_OUT).getExecuteOut();</span><br><span class="line">        logger.debug(<span class="string">"转换结果：&#123;&#125;"</span>, result);</span><br><span class="line">        docPath = docPath.replace(<span class="string">".docx"</span>, <span class="string">".pdf"</span>);</span><br><span class="line">        <span class="keyword">return</span> docPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、docx4j"><a href="#二、docx4j" class="headerlink" title="二、docx4j"></a>二、docx4j</h3><p>优点：性能比libreoffice稍好</p><p>缺点：性能差、容易出现PDF和Word样式不一致问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Mapper fontMapper = <span class="keyword">new</span> IdentityPlusMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化字体</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    fontMapper.put(<span class="string">"隶书"</span>, PhysicalFonts.get(<span class="string">"LiSu"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"宋体"</span>, PhysicalFonts.get(<span class="string">"SimSun"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"微软雅黑"</span>, PhysicalFonts.get(<span class="string">"Microsoft Yahei"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"黑体"</span>, PhysicalFonts.get(<span class="string">"SimHei"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"楷体"</span>, PhysicalFonts.get(<span class="string">"KaiTi"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"新宋体"</span>, PhysicalFonts.get(<span class="string">"NSimSun"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"华文行楷"</span>, PhysicalFonts.get(<span class="string">"STXingkai"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"华文仿宋"</span>, PhysicalFonts.get(<span class="string">"STFangsong"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"宋体扩展"</span>, PhysicalFonts.get(<span class="string">"simsun-extB"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"仿宋"</span>, PhysicalFonts.get(<span class="string">"FangSong"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"仿宋_GB2312"</span>, PhysicalFonts.get(<span class="string">"FangSong_GB2312"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"幼圆"</span>, PhysicalFonts.get(<span class="string">"YouYuan"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"华文宋体"</span>, PhysicalFonts.get(<span class="string">"STSong"</span>));</span><br><span class="line">    fontMapper.put(<span class="string">"华文中宋"</span>, PhysicalFonts.get(<span class="string">"STZhongsong"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">docxToPdf</span><span class="params">(String docxPath)</span> </span>&#123;</span><br><span class="line">    OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    String pdfPath = docxPath.replace(<span class="string">".docx"</span>, <span class="string">".pdf"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WordprocessingMLPackage mlPackage = WordprocessingMLPackage.load(<span class="keyword">new</span> File(docxPath));</span><br><span class="line">        mlPackage.setFontMapper(fontMapper);</span><br><span class="line">        outputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(pdfPath));</span><br><span class="line">        FOSettings foSettings = Docx4J.createFOSettings();</span><br><span class="line">        foSettings.setWmlPackage(mlPackage);</span><br><span class="line">        Docx4J.toFO(foSettings, outputStream, Docx4J.FLAG_EXPORT_PREFER_XSL);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        logger.error(<span class="string">"docx转PDF失败！"</span>, ex);</span><br><span class="line">        pdfPath = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IOUtils.closeQuietly(outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pdfPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、documents4j"><a href="#三、documents4j" class="headerlink" title="三、documents4j"></a>三、documents4j</h3><p>优点：样式稳定、性能高</p><p>缺点：要依赖本地的office软件做转换，在linux下要调远程服务来转换</p><p>GitHub：<a href="https://github.com/documents4j" target="_blank" rel="noopener">documents4j</a></p><p>调用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">docxToPdf</span><span class="params">(String docxPath)</span> </span>&#123;</span><br><span class="line">        String pdfPath = docxPath.replace(<span class="string">".docx"</span>, <span class="string">".pdf"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> success = getConverter()</span><br><span class="line">                .convert(<span class="keyword">new</span> File(docxPath))</span><br><span class="line">                .as(DocumentType.DOCX)</span><br><span class="line">                .to(<span class="keyword">new</span> File(pdfPath))</span><br><span class="line">                .as(DocumentType.PDF).execute();</span><br><span class="line">        logger.debug(<span class="string">"Word转换PDF结果：&#123;&#125;"</span>, success);</span><br><span class="line">        <span class="keyword">return</span> success ? pdfPath : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IConverter <span class="title">getConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String conversionServerUrl = Global.getConfig(<span class="string">"conversionServer.url"</span>);</span><br><span class="line">        <span class="comment">// 如果配置了远程转换服务器地址，则初始化远程转换对象</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(conversionServerUrl)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!conversionServerUrl.startsWith(<span class="string">"http"</span>))</span><br><span class="line">                conversionServerUrl = <span class="string">"http://"</span> + conversionServerUrl;</span><br><span class="line">            converter = RemoteConverter.builder()</span><br><span class="line">                    .baseFolder(<span class="keyword">new</span> File(POfficeConstants.TEMP_SAVE_PATH))</span><br><span class="line">                    .workerPool(<span class="number">20</span>, <span class="number">25</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                    .requestTimeout(<span class="number">120</span>, TimeUnit.SECONDS)</span><br><span class="line">                    .baseUri(conversionServerUrl)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建本地转换对象</span></span><br><span class="line">            converter = LocalConverter.builder()</span><br><span class="line">                    .baseFolder(<span class="keyword">new</span> File(POfficeConstants.TEMP_SAVE_PATH))</span><br><span class="line">                    .workerPool(<span class="number">20</span>, <span class="number">25</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                    .processTimeout(<span class="number">2L</span>, TimeUnit.MINUTES)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> converter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、jacob"><a href="#四、jacob" class="headerlink" title="四、jacob"></a>四、jacob</h3><p>优点：样式稳定、性能高</p><p>缺点：只支持window系统且服务器要安装office软件，并发量大时会有瓶颈</p><p>可以单独部署一台windows服务器，提供文档转换服务</p><p>基于spring boot的转换服务器例子：<a href="https://gitee.com/wells2333/converter.git" target="_blank" rel="noopener">converter</a></p><h3 id="五、pageOffice"><a href="#五、pageOffice" class="headerlink" title="五、pageOffice"></a>五、pageOffice</h3><p>优点：兼容性好，性能高</p><p>缺点：收费，客户端需要安装office软件和卓正控件，偶尔会出现兼容性问题</p><p>具体实现是客户的浏览器利用卓正控件打开Word文档，调用卓正提供的js接口，将文档保存为PDF，上传到服务器，服务器将上传的PDF做处理（如添加水印等）后提供给客户下载。</p><p>因为Word转PDF的过程是在客户的电脑上实现的，所以服务器基本没什么压力，但客户的电脑需要安装office软件和卓正控件。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实际应用中，前面四种方案都用过，踩了不少坑，比如libreoffice，要考虑生产环境低内核版本问题，docx4j的转换后样式错乱问题，documents4j不稳定，会出现进程阻塞，jacob只支持window服务器</p><p>目前实际采用的是卓正的pageOffice。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍Java里实现Word转PDF的几种方案，分别是libreoffice、docx4j、documents4j、jacob、pageOffice。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://ehedgehog.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>关于quartz</title>
    <link href="http://ehedgehog.com/2018/06/28/%E5%85%B3%E4%BA%8Equartz/"/>
    <id>http://ehedgehog.com/2018/06/28/%E5%85%B3%E4%BA%8Equartz/</id>
    <published>2018-06-28T15:51:49.000Z</published>
    <updated>2019-07-14T05:33:17.777Z</updated>
    
    <content type="html"><![CDATA[<p>分享去年预研分布式定时调度整理的关于quartz的思维导图。</p><a id="more"></a><img src="/images/quartz2.x.png" title="quartz">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享去年预研分布式定时调度整理的关于quartz的思维导图。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://ehedgehog.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="任务调度" scheme="http://ehedgehog.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
</feed>
